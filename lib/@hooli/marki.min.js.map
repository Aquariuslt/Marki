{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///@hooli/marki.min.js","webpack:///webpack/bootstrap 951860cb6f4d57e13c98","webpack:///./src/main.ts","webpack:///./src/lexer/index.ts","webpack:///./node_modules/marked/lib/marked.js","webpack:///(webpack)/buildin/global.js","webpack:///./src/parser/index.ts","webpack:///./src/renderer/index.ts"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","marki","value","lexer_1","Lexer","default","parser_1","Parser","renderer_1","Renderer","marked","lexerOptions","lexer","lex","source","global","options","tokens","links","defaults","rules","block","normal","gfm","tables","InlineLexer","inline","renderer","Error","breaks","pedantic","token","escape","html","encode","replace","unescape","_","toLowerCase","charAt","String","fromCharCode","parseInt","substring","regex","opt","self","val","RegExp","noop","merge","obj","target","key","arguments","length","src","callback","pending","highlight","e","done","err","out","parse","type","text","lang","code","escaped","message","silent","newline","fences","hr","heading","nptable","lheading","blockquote","list","def","table","paragraph","bullet","item","_tag","top","bq","next","loose","cap","bull","b","space","exec","push","depth","header","split","align","cells","test","ordered","match","indexOf","smartLists","slice","join","sanitize","pre","sanitizer","href","title","charCodeAt","autolink","url","tag","link","reflink","nolink","strong","em","br","del","_inside","_href","output","mangle","inLink","outputLink","codespan","smartypants","image","ch","Math","random","toString","langPrefix","quote","level","raw","headerPrefix","xhtml","body","listitem","tablerow","content","tablecell","flags","prot","decodeURIComponent","reverse","tok","pop","peek","parseText","row","cell","j","setOptions","parser","inlineLexer","window","g","Function","eval","language","isEscaped"],"mappings":"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","file":"@hooli/marki.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@hooli/marki\"] = factory();\n\telse\n\t\troot[\"@hooli/marki\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@hooli/marki\"] = factory();\n\telse\n\t\troot[\"@hooli/marki\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar lexer_1 = __webpack_require__(1);\nexports.Lexer = lexer_1.default;\nvar parser_1 = __webpack_require__(4);\nexports.Parser = parser_1.default;\nvar renderer_1 = __webpack_require__(5);\nexports.Renderer = renderer_1.default;\nfunction marki() {\n}\nexports.marki = marki;\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar marked = __webpack_require__(2);\nvar Lexer = /** @class */ (function () {\n    function Lexer(lexerOptions) {\n        var $this = this;\n        $this.lexer = new marked.Lexer();\n    }\n    Lexer.prototype.lex = function (source) {\n        var $this = this;\n        return $this.lexer.lex(source);\n    };\n    return Lexer;\n}());\nexports.default = Lexer;\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {/**\n * marked - a markdown parser\n * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/chjj/marked\n */\n\n;(function() {\n\n/**\n * Block-Level Grammar\n */\n\nvar block = {\n  newline: /^\\n+/,\n  code: /^( {4}[^\\n]+\\n*)+/,\n  fences: noop,\n  hr: /^( *[-*_]){3,} *(?:\\n+|$)/,\n  heading: /^ *(#{1,6}) *([^\\n]+?) *#* *(?:\\n+|$)/,\n  nptable: noop,\n  lheading: /^([^\\n]+)\\n *(=|-){2,} *(?:\\n+|$)/,\n  blockquote: /^( *>[^\\n]+(\\n(?!def)[^\\n]+)*\\n*)+/,\n  list: /^( *)(bull) [\\s\\S]+?(?:hr|def|\\n{2,}(?! )(?!\\1bull )\\n*|\\s*$)/,\n  html: /^ *(?:comment *(?:\\n|\\s*$)|closed *(?:\\n{2,}|\\s*$)|closing *(?:\\n{2,}|\\s*$))/,\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +[\"(]([^\\n]+)[\")])? *(?:\\n+|$)/,\n  table: noop,\n  paragraph: /^((?:[^\\n]+\\n?(?!hr|heading|lheading|blockquote|tag|def))+)\\n*/,\n  text: /^[^\\n]+/\n};\n\nblock.bullet = /(?:[*+-]|\\d+\\.)/;\nblock.item = /^( *)(bull) [^\\n]*(?:\\n(?!\\1bull )[^\\n]*)*/;\nblock.item = replace(block.item, 'gm')\n  (/bull/g, block.bullet)\n  ();\n\nblock.list = replace(block.list)\n  (/bull/g, block.bullet)\n  ('hr', '\\\\n+(?=\\\\1?(?:[-*_] *){3,}(?:\\\\n+|$))')\n  ('def', '\\\\n+(?=' + block.def.source + ')')\n  ();\n\nblock.blockquote = replace(block.blockquote)\n  ('def', block.def)\n  ();\n\nblock._tag = '(?!(?:'\n  + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code'\n  + '|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo'\n  + '|span|br|wbr|ins|del|img)\\\\b)\\\\w+(?!:/|[^\\\\w\\\\s@]*@)\\\\b';\n\nblock.html = replace(block.html)\n  ('comment', /<!--[\\s\\S]*?-->/)\n  ('closed', /<(tag)[\\s\\S]+?<\\/\\1>/)\n  ('closing', /<tag(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>/)\n  (/tag/g, block._tag)\n  ();\n\nblock.paragraph = replace(block.paragraph)\n  ('hr', block.hr)\n  ('heading', block.heading)\n  ('lheading', block.lheading)\n  ('blockquote', block.blockquote)\n  ('tag', '<' + block._tag)\n  ('def', block.def)\n  ();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = merge({}, block);\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = merge({}, block.normal, {\n  fences: /^ *(`{3,}|~{3,})[ \\.]*(\\S+)? *\\n([\\s\\S]*?)\\s*\\1 *(?:\\n+|$)/,\n  paragraph: /^/,\n  heading: /^ *(#{1,6}) +([^\\n]+?) *#* *(?:\\n+|$)/\n});\n\nblock.gfm.paragraph = replace(block.paragraph)\n  ('(?!', '(?!'\n    + block.gfm.fences.source.replace('\\\\1', '\\\\2') + '|'\n    + block.list.source.replace('\\\\1', '\\\\3') + '|')\n  ();\n\n/**\n * GFM + Tables Block Grammar\n */\n\nblock.tables = merge({}, block.gfm, {\n  nptable: /^ *(\\S.*\\|.*)\\n *([-:]+ *\\|[-| :]*)\\n((?:.*\\|.*(?:\\n|$))*)\\n*/,\n  table: /^ *\\|(.+)\\n *\\|( *[-:]+[-| :]*)\\n((?: *\\|.*(?:\\n|$))*)\\n*/\n});\n\n/**\n * Block Lexer\n */\n\nfunction Lexer(options) {\n  this.tokens = [];\n  this.tokens.links = {};\n  this.options = options || marked.defaults;\n  this.rules = block.normal;\n\n  if (this.options.gfm) {\n    if (this.options.tables) {\n      this.rules = block.tables;\n    } else {\n      this.rules = block.gfm;\n    }\n  }\n}\n\n/**\n * Expose Block Rules\n */\n\nLexer.rules = block;\n\n/**\n * Static Lex Method\n */\n\nLexer.lex = function(src, options) {\n  var lexer = new Lexer(options);\n  return lexer.lex(src);\n};\n\n/**\n * Preprocessing\n */\n\nLexer.prototype.lex = function(src) {\n  src = src\n    .replace(/\\r\\n|\\r/g, '\\n')\n    .replace(/\\t/g, '    ')\n    .replace(/\\u00a0/g, ' ')\n    .replace(/\\u2424/g, '\\n');\n\n  return this.token(src, true);\n};\n\n/**\n * Lexing\n */\n\nLexer.prototype.token = function(src, top, bq) {\n  var src = src.replace(/^ +$/gm, '')\n    , next\n    , loose\n    , cap\n    , bull\n    , b\n    , item\n    , space\n    , i\n    , l;\n\n  while (src) {\n    // newline\n    if (cap = this.rules.newline.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (cap[0].length > 1) {\n        this.tokens.push({\n          type: 'space'\n        });\n      }\n    }\n\n    // code\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      cap = cap[0].replace(/^ {4}/gm, '');\n      this.tokens.push({\n        type: 'code',\n        text: !this.options.pedantic\n          ? cap.replace(/\\n+$/, '')\n          : cap\n      });\n      continue;\n    }\n\n    // fences (gfm)\n    if (cap = this.rules.fences.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'code',\n        lang: cap[2],\n        text: cap[3] || ''\n      });\n      continue;\n    }\n\n    // heading\n    if (cap = this.rules.heading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[1].length,\n        text: cap[2]\n      });\n      continue;\n    }\n\n    // table no leading pipe (gfm)\n    if (top && (cap = this.rules.nptable.exec(src))) {\n      src = src.substring(cap[0].length);\n\n      item = {\n        type: 'table',\n        header: cap[1].replace(/^ *| *\\| *$/g, '').split(/ *\\| */),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        cells: cap[3].replace(/\\n$/, '').split('\\n')\n      };\n\n      for (i = 0; i < item.align.length; i++) {\n        if (/^ *-+: *$/.test(item.align[i])) {\n          item.align[i] = 'right';\n        } else if (/^ *:-+: *$/.test(item.align[i])) {\n          item.align[i] = 'center';\n        } else if (/^ *:-+ *$/.test(item.align[i])) {\n          item.align[i] = 'left';\n        } else {\n          item.align[i] = null;\n        }\n      }\n\n      for (i = 0; i < item.cells.length; i++) {\n        item.cells[i] = item.cells[i].split(/ *\\| */);\n      }\n\n      this.tokens.push(item);\n\n      continue;\n    }\n\n    // lheading\n    if (cap = this.rules.lheading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[2] === '=' ? 1 : 2,\n        text: cap[1]\n      });\n      continue;\n    }\n\n    // hr\n    if (cap = this.rules.hr.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'hr'\n      });\n      continue;\n    }\n\n    // blockquote\n    if (cap = this.rules.blockquote.exec(src)) {\n      src = src.substring(cap[0].length);\n\n      this.tokens.push({\n        type: 'blockquote_start'\n      });\n\n      cap = cap[0].replace(/^ *> ?/gm, '');\n\n      // Pass `top` to keep the current\n      // \"toplevel\" state. This is exactly\n      // how markdown.pl works.\n      this.token(cap, top, true);\n\n      this.tokens.push({\n        type: 'blockquote_end'\n      });\n\n      continue;\n    }\n\n    // list\n    if (cap = this.rules.list.exec(src)) {\n      src = src.substring(cap[0].length);\n      bull = cap[2];\n\n      this.tokens.push({\n        type: 'list_start',\n        ordered: bull.length > 1\n      });\n\n      // Get each top-level item.\n      cap = cap[0].match(this.rules.item);\n\n      next = false;\n      l = cap.length;\n      i = 0;\n\n      for (; i < l; i++) {\n        item = cap[i];\n\n        // Remove the list item's bullet\n        // so it is seen as the next token.\n        space = item.length;\n        item = item.replace(/^ *([*+-]|\\d+\\.) +/, '');\n\n        // Outdent whatever the\n        // list item contains. Hacky.\n        if (~item.indexOf('\\n ')) {\n          space -= item.length;\n          item = !this.options.pedantic\n            ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')\n            : item.replace(/^ {1,4}/gm, '');\n        }\n\n        // Determine whether the next list item belongs here.\n        // Backpedal if it does not belong in this list.\n        if (this.options.smartLists && i !== l - 1) {\n          b = block.bullet.exec(cap[i + 1])[0];\n          if (bull !== b && !(bull.length > 1 && b.length > 1)) {\n            src = cap.slice(i + 1).join('\\n') + src;\n            i = l - 1;\n          }\n        }\n\n        // Determine whether item is loose or not.\n        // Use: /(^|\\n)(?! )[^\\n]+\\n\\n(?!\\s*$)/\n        // for discount behavior.\n        loose = next || /\\n\\n(?!\\s*$)/.test(item);\n        if (i !== l - 1) {\n          next = item.charAt(item.length - 1) === '\\n';\n          if (!loose) loose = next;\n        }\n\n        this.tokens.push({\n          type: loose\n            ? 'loose_item_start'\n            : 'list_item_start'\n        });\n\n        // Recurse.\n        this.token(item, false, bq);\n\n        this.tokens.push({\n          type: 'list_item_end'\n        });\n      }\n\n      this.tokens.push({\n        type: 'list_end'\n      });\n\n      continue;\n    }\n\n    // html\n    if (cap = this.rules.html.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: this.options.sanitize\n          ? 'paragraph'\n          : 'html',\n        pre: !this.options.sanitizer\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      });\n      continue;\n    }\n\n    // def\n    if ((!bq && top) && (cap = this.rules.def.exec(src))) {\n      src = src.substring(cap[0].length);\n      this.tokens.links[cap[1].toLowerCase()] = {\n        href: cap[2],\n        title: cap[3]\n      };\n      continue;\n    }\n\n    // table (gfm)\n    if (top && (cap = this.rules.table.exec(src))) {\n      src = src.substring(cap[0].length);\n\n      item = {\n        type: 'table',\n        header: cap[1].replace(/^ *| *\\| *$/g, '').split(/ *\\| */),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        cells: cap[3].replace(/(?: *\\| *)?\\n$/, '').split('\\n')\n      };\n\n      for (i = 0; i < item.align.length; i++) {\n        if (/^ *-+: *$/.test(item.align[i])) {\n          item.align[i] = 'right';\n        } else if (/^ *:-+: *$/.test(item.align[i])) {\n          item.align[i] = 'center';\n        } else if (/^ *:-+ *$/.test(item.align[i])) {\n          item.align[i] = 'left';\n        } else {\n          item.align[i] = null;\n        }\n      }\n\n      for (i = 0; i < item.cells.length; i++) {\n        item.cells[i] = item.cells[i]\n          .replace(/^ *\\| *| *\\| *$/g, '')\n          .split(/ *\\| */);\n      }\n\n      this.tokens.push(item);\n\n      continue;\n    }\n\n    // top-level paragraph\n    if (top && (cap = this.rules.paragraph.exec(src))) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'paragraph',\n        text: cap[1].charAt(cap[1].length - 1) === '\\n'\n          ? cap[1].slice(0, -1)\n          : cap[1]\n      });\n      continue;\n    }\n\n    // text\n    if (cap = this.rules.text.exec(src)) {\n      // Top-level should never reach here.\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'text',\n        text: cap[0]\n      });\n      continue;\n    }\n\n    if (src) {\n      throw new\n        Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return this.tokens;\n};\n\n/**\n * Inline-Level Grammar\n */\n\nvar inline = {\n  escape: /^\\\\([\\\\`*{}\\[\\]()#+\\-.!_>])/,\n  autolink: /^<([^ >]+(@|:\\/)[^ >]+)>/,\n  url: noop,\n  tag: /^<!--[\\s\\S]*?-->|^<\\/?\\w+(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>/,\n  link: /^!?\\[(inside)\\]\\(href\\)/,\n  reflink: /^!?\\[(inside)\\]\\s*\\[([^\\]]*)\\]/,\n  nolink: /^!?\\[((?:\\[[^\\]]*\\]|[^\\[\\]])*)\\]/,\n  strong: /^__([\\s\\S]+?)__(?!_)|^\\*\\*([\\s\\S]+?)\\*\\*(?!\\*)/,\n  em: /^\\b_((?:[^_]|__)+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,\n  code: /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/,\n  br: /^ {2,}\\n(?!\\s*$)/,\n  del: noop,\n  text: /^[\\s\\S]+?(?=[\\\\<!\\[_*`]| {2,}\\n|$)/\n};\n\ninline._inside = /(?:\\[[^\\]]*\\]|[^\\[\\]]|\\](?=[^\\[]*\\]))*/;\ninline._href = /\\s*<?([\\s\\S]*?)>?(?:\\s+['\"]([\\s\\S]*?)['\"])?\\s*/;\n\ninline.link = replace(inline.link)\n  ('inside', inline._inside)\n  ('href', inline._href)\n  ();\n\ninline.reflink = replace(inline.reflink)\n  ('inside', inline._inside)\n  ();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = merge({}, inline);\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = merge({}, inline.normal, {\n  strong: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n  em: /^_(?=\\S)([\\s\\S]*?\\S)_(?!_)|^\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)/\n});\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = merge({}, inline.normal, {\n  escape: replace(inline.escape)('])', '~|])')(),\n  url: /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/,\n  del: /^~~(?=\\S)([\\s\\S]*?\\S)~~/,\n  text: replace(inline.text)\n    (']|', '~]|')\n    ('|', '|https?://|')\n    ()\n});\n\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = merge({}, inline.gfm, {\n  br: replace(inline.br)('{2,}', '*')(),\n  text: replace(inline.gfm.text)('{2,}', '*')()\n});\n\n/**\n * Inline Lexer & Compiler\n */\n\nfunction InlineLexer(links, options) {\n  this.options = options || marked.defaults;\n  this.links = links;\n  this.rules = inline.normal;\n  this.renderer = this.options.renderer || new Renderer;\n  this.renderer.options = this.options;\n\n  if (!this.links) {\n    throw new\n      Error('Tokens array requires a `links` property.');\n  }\n\n  if (this.options.gfm) {\n    if (this.options.breaks) {\n      this.rules = inline.breaks;\n    } else {\n      this.rules = inline.gfm;\n    }\n  } else if (this.options.pedantic) {\n    this.rules = inline.pedantic;\n  }\n}\n\n/**\n * Expose Inline Rules\n */\n\nInlineLexer.rules = inline;\n\n/**\n * Static Lexing/Compiling Method\n */\n\nInlineLexer.output = function(src, links, options) {\n  var inline = new InlineLexer(links, options);\n  return inline.output(src);\n};\n\n/**\n * Lexing/Compiling\n */\n\nInlineLexer.prototype.output = function(src) {\n  var out = ''\n    , link\n    , text\n    , href\n    , cap;\n\n  while (src) {\n    // escape\n    if (cap = this.rules.escape.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += cap[1];\n      continue;\n    }\n\n    // autolink\n    if (cap = this.rules.autolink.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (cap[2] === '@') {\n        text = cap[1].charAt(6) === ':'\n          ? this.mangle(cap[1].substring(7))\n          : this.mangle(cap[1]);\n        href = this.mangle('mailto:') + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n      out += this.renderer.link(href, null, text);\n      continue;\n    }\n\n    // url (gfm)\n    if (!this.inLink && (cap = this.rules.url.exec(src))) {\n      src = src.substring(cap[0].length);\n      text = escape(cap[1]);\n      href = text;\n      out += this.renderer.link(href, null, text);\n      continue;\n    }\n\n    // tag\n    if (cap = this.rules.tag.exec(src)) {\n      if (!this.inLink && /^<a /i.test(cap[0])) {\n        this.inLink = true;\n      } else if (this.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.inLink = false;\n      }\n      src = src.substring(cap[0].length);\n      out += this.options.sanitize\n        ? this.options.sanitizer\n          ? this.options.sanitizer(cap[0])\n          : escape(cap[0])\n        : cap[0]\n      continue;\n    }\n\n    // link\n    if (cap = this.rules.link.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.inLink = true;\n      out += this.outputLink(cap, {\n        href: cap[2],\n        title: cap[3]\n      });\n      this.inLink = false;\n      continue;\n    }\n\n    // reflink, nolink\n    if ((cap = this.rules.reflink.exec(src))\n        || (cap = this.rules.nolink.exec(src))) {\n      src = src.substring(cap[0].length);\n      link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = this.links[link.toLowerCase()];\n      if (!link || !link.href) {\n        out += cap[0].charAt(0);\n        src = cap[0].substring(1) + src;\n        continue;\n      }\n      this.inLink = true;\n      out += this.outputLink(cap, link);\n      this.inLink = false;\n      continue;\n    }\n\n    // strong\n    if (cap = this.rules.strong.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.strong(this.output(cap[2] || cap[1]));\n      continue;\n    }\n\n    // em\n    if (cap = this.rules.em.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.em(this.output(cap[2] || cap[1]));\n      continue;\n    }\n\n    // code\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.codespan(escape(cap[2], true));\n      continue;\n    }\n\n    // br\n    if (cap = this.rules.br.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.br();\n      continue;\n    }\n\n    // del (gfm)\n    if (cap = this.rules.del.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.del(this.output(cap[1]));\n      continue;\n    }\n\n    // text\n    if (cap = this.rules.text.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.text(escape(this.smartypants(cap[0])));\n      continue;\n    }\n\n    if (src) {\n      throw new\n        Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return out;\n};\n\n/**\n * Compile Link\n */\n\nInlineLexer.prototype.outputLink = function(cap, link) {\n  var href = escape(link.href)\n    , title = link.title ? escape(link.title) : null;\n\n  return cap[0].charAt(0) !== '!'\n    ? this.renderer.link(href, title, this.output(cap[1]))\n    : this.renderer.image(href, title, escape(cap[1]));\n};\n\n/**\n * Smartypants Transformations\n */\n\nInlineLexer.prototype.smartypants = function(text) {\n  if (!this.options.smartypants) return text;\n  return text\n    // em-dashes\n    .replace(/---/g, '\\u2014')\n    // en-dashes\n    .replace(/--/g, '\\u2013')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n};\n\n/**\n * Mangle Links\n */\n\nInlineLexer.prototype.mangle = function(text) {\n  if (!this.options.mangle) return text;\n  var out = ''\n    , l = text.length\n    , i = 0\n    , ch;\n\n  for (; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n};\n\n/**\n * Renderer\n */\n\nfunction Renderer(options) {\n  this.options = options || {};\n}\n\nRenderer.prototype.code = function(code, lang, escaped) {\n  if (this.options.highlight) {\n    var out = this.options.highlight(code, lang);\n    if (out != null && out !== code) {\n      escaped = true;\n      code = out;\n    }\n  }\n\n  if (!lang) {\n    return '<pre><code>'\n      + (escaped ? code : escape(code, true))\n      + '\\n</code></pre>';\n  }\n\n  return '<pre><code class=\"'\n    + this.options.langPrefix\n    + escape(lang, true)\n    + '\">'\n    + (escaped ? code : escape(code, true))\n    + '\\n</code></pre>\\n';\n};\n\nRenderer.prototype.blockquote = function(quote) {\n  return '<blockquote>\\n' + quote + '</blockquote>\\n';\n};\n\nRenderer.prototype.html = function(html) {\n  return html;\n};\n\nRenderer.prototype.heading = function(text, level, raw) {\n  return '<h'\n    + level\n    + ' id=\"'\n    + this.options.headerPrefix\n    + raw.toLowerCase().replace(/[^\\w]+/g, '-')\n    + '\">'\n    + text\n    + '</h'\n    + level\n    + '>\\n';\n};\n\nRenderer.prototype.hr = function() {\n  return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n};\n\nRenderer.prototype.list = function(body, ordered) {\n  var type = ordered ? 'ol' : 'ul';\n  return '<' + type + '>\\n' + body + '</' + type + '>\\n';\n};\n\nRenderer.prototype.listitem = function(text) {\n  return '<li>' + text + '</li>\\n';\n};\n\nRenderer.prototype.paragraph = function(text) {\n  return '<p>' + text + '</p>\\n';\n};\n\nRenderer.prototype.table = function(header, body) {\n  return '<table>\\n'\n    + '<thead>\\n'\n    + header\n    + '</thead>\\n'\n    + '<tbody>\\n'\n    + body\n    + '</tbody>\\n'\n    + '</table>\\n';\n};\n\nRenderer.prototype.tablerow = function(content) {\n  return '<tr>\\n' + content + '</tr>\\n';\n};\n\nRenderer.prototype.tablecell = function(content, flags) {\n  var type = flags.header ? 'th' : 'td';\n  var tag = flags.align\n    ? '<' + type + ' style=\"text-align:' + flags.align + '\">'\n    : '<' + type + '>';\n  return tag + content + '</' + type + '>\\n';\n};\n\n// span level renderer\nRenderer.prototype.strong = function(text) {\n  return '<strong>' + text + '</strong>';\n};\n\nRenderer.prototype.em = function(text) {\n  return '<em>' + text + '</em>';\n};\n\nRenderer.prototype.codespan = function(text) {\n  return '<code>' + text + '</code>';\n};\n\nRenderer.prototype.br = function() {\n  return this.options.xhtml ? '<br/>' : '<br>';\n};\n\nRenderer.prototype.del = function(text) {\n  return '<del>' + text + '</del>';\n};\n\nRenderer.prototype.link = function(href, title, text) {\n  if (this.options.sanitize) {\n    try {\n      var prot = decodeURIComponent(unescape(href))\n        .replace(/[^\\w:]/g, '')\n        .toLowerCase();\n    } catch (e) {\n      return '';\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0) {\n      return '';\n    }\n  }\n  var out = '<a href=\"' + href + '\"';\n  if (title) {\n    out += ' title=\"' + title + '\"';\n  }\n  out += '>' + text + '</a>';\n  return out;\n};\n\nRenderer.prototype.image = function(href, title, text) {\n  var out = '<img src=\"' + href + '\" alt=\"' + text + '\"';\n  if (title) {\n    out += ' title=\"' + title + '\"';\n  }\n  out += this.options.xhtml ? '/>' : '>';\n  return out;\n};\n\nRenderer.prototype.text = function(text) {\n  return text;\n};\n\n/**\n * Parsing & Compiling\n */\n\nfunction Parser(options) {\n  this.tokens = [];\n  this.token = null;\n  this.options = options || marked.defaults;\n  this.options.renderer = this.options.renderer || new Renderer;\n  this.renderer = this.options.renderer;\n  this.renderer.options = this.options;\n}\n\n/**\n * Static Parse Method\n */\n\nParser.parse = function(src, options, renderer) {\n  var parser = new Parser(options, renderer);\n  return parser.parse(src);\n};\n\n/**\n * Parse Loop\n */\n\nParser.prototype.parse = function(src) {\n  this.inline = new InlineLexer(src.links, this.options, this.renderer);\n  this.tokens = src.reverse();\n\n  var out = '';\n  while (this.next()) {\n    out += this.tok();\n  }\n\n  return out;\n};\n\n/**\n * Next Token\n */\n\nParser.prototype.next = function() {\n  return this.token = this.tokens.pop();\n};\n\n/**\n * Preview Next Token\n */\n\nParser.prototype.peek = function() {\n  return this.tokens[this.tokens.length - 1] || 0;\n};\n\n/**\n * Parse Text Tokens\n */\n\nParser.prototype.parseText = function() {\n  var body = this.token.text;\n\n  while (this.peek().type === 'text') {\n    body += '\\n' + this.next().text;\n  }\n\n  return this.inline.output(body);\n};\n\n/**\n * Parse Current Token\n */\n\nParser.prototype.tok = function() {\n  switch (this.token.type) {\n    case 'space': {\n      return '';\n    }\n    case 'hr': {\n      return this.renderer.hr();\n    }\n    case 'heading': {\n      return this.renderer.heading(\n        this.inline.output(this.token.text),\n        this.token.depth,\n        this.token.text);\n    }\n    case 'code': {\n      return this.renderer.code(this.token.text,\n        this.token.lang,\n        this.token.escaped);\n    }\n    case 'table': {\n      var header = ''\n        , body = ''\n        , i\n        , row\n        , cell\n        , flags\n        , j;\n\n      // header\n      cell = '';\n      for (i = 0; i < this.token.header.length; i++) {\n        flags = { header: true, align: this.token.align[i] };\n        cell += this.renderer.tablecell(\n          this.inline.output(this.token.header[i]),\n          { header: true, align: this.token.align[i] }\n        );\n      }\n      header += this.renderer.tablerow(cell);\n\n      for (i = 0; i < this.token.cells.length; i++) {\n        row = this.token.cells[i];\n\n        cell = '';\n        for (j = 0; j < row.length; j++) {\n          cell += this.renderer.tablecell(\n            this.inline.output(row[j]),\n            { header: false, align: this.token.align[j] }\n          );\n        }\n\n        body += this.renderer.tablerow(cell);\n      }\n      return this.renderer.table(header, body);\n    }\n    case 'blockquote_start': {\n      var body = '';\n\n      while (this.next().type !== 'blockquote_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.blockquote(body);\n    }\n    case 'list_start': {\n      var body = ''\n        , ordered = this.token.ordered;\n\n      while (this.next().type !== 'list_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.list(body, ordered);\n    }\n    case 'list_item_start': {\n      var body = '';\n\n      while (this.next().type !== 'list_item_end') {\n        body += this.token.type === 'text'\n          ? this.parseText()\n          : this.tok();\n      }\n\n      return this.renderer.listitem(body);\n    }\n    case 'loose_item_start': {\n      var body = '';\n\n      while (this.next().type !== 'list_item_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.listitem(body);\n    }\n    case 'html': {\n      var html = !this.token.pre && !this.options.pedantic\n        ? this.inline.output(this.token.text)\n        : this.token.text;\n      return this.renderer.html(html);\n    }\n    case 'paragraph': {\n      return this.renderer.paragraph(this.inline.output(this.token.text));\n    }\n    case 'text': {\n      return this.renderer.paragraph(this.parseText());\n    }\n  }\n};\n\n/**\n * Helpers\n */\n\nfunction escape(html, encode) {\n  return html\n    .replace(!encode ? /&(?!#?\\w+;)/g : /&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#39;');\n}\n\nfunction unescape(html) {\n\t// explicitly match decimal, hex, and named HTML entities \n  return html.replace(/&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/g, function(_, n) {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nfunction replace(regex, opt) {\n  regex = regex.source;\n  opt = opt || '';\n  return function self(name, val) {\n    if (!name) return new RegExp(regex, opt);\n    val = val.source || val;\n    val = val.replace(/(^|[^\\[])\\^/g, '$1');\n    regex = regex.replace(name, val);\n    return self;\n  };\n}\n\nfunction noop() {}\nnoop.exec = noop;\n\nfunction merge(obj) {\n  var i = 1\n    , target\n    , key;\n\n  for (; i < arguments.length; i++) {\n    target = arguments[i];\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n\n  return obj;\n}\n\n\n/**\n * Marked\n */\n\nfunction marked(src, opt, callback) {\n  if (callback || typeof opt === 'function') {\n    if (!callback) {\n      callback = opt;\n      opt = null;\n    }\n\n    opt = merge({}, marked.defaults, opt || {});\n\n    var highlight = opt.highlight\n      , tokens\n      , pending\n      , i = 0;\n\n    try {\n      tokens = Lexer.lex(src, opt)\n    } catch (e) {\n      return callback(e);\n    }\n\n    pending = tokens.length;\n\n    var done = function(err) {\n      if (err) {\n        opt.highlight = highlight;\n        return callback(err);\n      }\n\n      var out;\n\n      try {\n        out = Parser.parse(tokens, opt);\n      } catch (e) {\n        err = e;\n      }\n\n      opt.highlight = highlight;\n\n      return err\n        ? callback(err)\n        : callback(null, out);\n    };\n\n    if (!highlight || highlight.length < 3) {\n      return done();\n    }\n\n    delete opt.highlight;\n\n    if (!pending) return done();\n\n    for (; i < tokens.length; i++) {\n      (function(token) {\n        if (token.type !== 'code') {\n          return --pending || done();\n        }\n        return highlight(token.text, token.lang, function(err, code) {\n          if (err) return done(err);\n          if (code == null || code === token.text) {\n            return --pending || done();\n          }\n          token.text = code;\n          token.escaped = true;\n          --pending || done();\n        });\n      })(tokens[i]);\n    }\n\n    return;\n  }\n  try {\n    if (opt) opt = merge({}, marked.defaults, opt);\n    return Parser.parse(Lexer.lex(src, opt), opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/chjj/marked.';\n    if ((opt || marked.defaults).silent) {\n      return '<p>An error occured:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n}\n\n/**\n * Options\n */\n\nmarked.options =\nmarked.setOptions = function(opt) {\n  merge(marked.defaults, opt);\n  return marked;\n};\n\nmarked.defaults = {\n  gfm: true,\n  tables: true,\n  breaks: false,\n  pedantic: false,\n  sanitize: false,\n  sanitizer: null,\n  mangle: true,\n  smartLists: false,\n  silent: false,\n  highlight: null,\n  langPrefix: 'lang-',\n  smartypants: false,\n  headerPrefix: '',\n  renderer: new Renderer,\n  xhtml: false\n};\n\n/**\n * Expose\n */\n\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\n\nmarked.Renderer = Renderer;\n\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\n\nmarked.InlineLexer = InlineLexer;\nmarked.inlineLexer = InlineLexer.output;\n\nmarked.parse = marked;\n\nif (true) {\n  module.exports = marked;\n} else if (typeof define === 'function' && define.amd) {\n  define(function() { return marked; });\n} else {\n  this.marked = marked;\n}\n\n}).call(function() {\n  return this || (typeof window !== 'undefined' ? window : global);\n}());\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\nvar g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Parser = /** @class */ (function () {\n    function Parser(src, options) {\n    }\n    Parser.prototype.parse = function (src, options) {\n        return '';\n    };\n    return Parser;\n}());\nexports.default = Parser;\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Renderer = /** @class */ (function () {\n    function Renderer(options) {\n    }\n    Renderer.prototype.code = function (code, language, isEscaped) {\n        return '';\n    };\n    Renderer.prototype.blockquote = function (quote) {\n        return '';\n    };\n    Renderer.prototype.html = function (html) {\n        return '';\n    };\n    Renderer.prototype.heading = function (text, level, raw) {\n        return '';\n    };\n    Renderer.prototype.hr = function () {\n        return '';\n    };\n    Renderer.prototype.list = function (body, ordered) {\n        return '';\n    };\n    Renderer.prototype.listitem = function (text) {\n        return '';\n    };\n    Renderer.prototype.paragraph = function (text) {\n        return '';\n    };\n    Renderer.prototype.table = function (header, body) {\n        return '';\n    };\n    Renderer.prototype.tablerow = function (content) {\n        return '';\n    };\n    Renderer.prototype.tablecell = function (content, flags) {\n        return '';\n    };\n    Renderer.prototype.strong = function (text) {\n        return '';\n    };\n    Renderer.prototype.em = function (text) {\n        return '';\n    };\n    Renderer.prototype.codespan = function (code) {\n        return '';\n    };\n    Renderer.prototype.br = function () {\n        return '';\n    };\n    Renderer.prototype.del = function (text) {\n        return '';\n    };\n    Renderer.prototype.link = function (href, title, text) {\n        return '';\n    };\n    Renderer.prototype.image = function (href, title, text) {\n        return '';\n    };\n    Renderer.prototype.text = function (text) {\n        return '';\n    };\n    return Renderer;\n}());\nexports.default = Renderer;\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// @hooli/marki.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 951860cb6f4d57e13c98","import Lexer from './lexer';\nimport Parser from './parser';\nimport Renderer from './renderer';\n\n\nexport {\n  Lexer,\n  Parser,\n  Renderer\n}\n\n\nexport function marki(){\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.ts","import * as marked from 'marked';\n\n\nexport default class Lexer {\n  private lexer;\n  private rules: Rules;\n  private tokens: TokensList;\n\n  constructor(lexerOptions?: LexerOptions) {\n    let $this = this;\n    $this.lexer = new marked.Lexer();\n  }\n\n  lex(source: string): TokensList {\n    let $this = this;\n    return $this.lexer.lex(source);\n  }\n\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lexer/index.ts","/**\n * marked - a markdown parser\n * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/chjj/marked\n */\n\n;(function() {\n\n/**\n * Block-Level Grammar\n */\n\nvar block = {\n  newline: /^\\n+/,\n  code: /^( {4}[^\\n]+\\n*)+/,\n  fences: noop,\n  hr: /^( *[-*_]){3,} *(?:\\n+|$)/,\n  heading: /^ *(#{1,6}) *([^\\n]+?) *#* *(?:\\n+|$)/,\n  nptable: noop,\n  lheading: /^([^\\n]+)\\n *(=|-){2,} *(?:\\n+|$)/,\n  blockquote: /^( *>[^\\n]+(\\n(?!def)[^\\n]+)*\\n*)+/,\n  list: /^( *)(bull) [\\s\\S]+?(?:hr|def|\\n{2,}(?! )(?!\\1bull )\\n*|\\s*$)/,\n  html: /^ *(?:comment *(?:\\n|\\s*$)|closed *(?:\\n{2,}|\\s*$)|closing *(?:\\n{2,}|\\s*$))/,\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +[\"(]([^\\n]+)[\")])? *(?:\\n+|$)/,\n  table: noop,\n  paragraph: /^((?:[^\\n]+\\n?(?!hr|heading|lheading|blockquote|tag|def))+)\\n*/,\n  text: /^[^\\n]+/\n};\n\nblock.bullet = /(?:[*+-]|\\d+\\.)/;\nblock.item = /^( *)(bull) [^\\n]*(?:\\n(?!\\1bull )[^\\n]*)*/;\nblock.item = replace(block.item, 'gm')\n  (/bull/g, block.bullet)\n  ();\n\nblock.list = replace(block.list)\n  (/bull/g, block.bullet)\n  ('hr', '\\\\n+(?=\\\\1?(?:[-*_] *){3,}(?:\\\\n+|$))')\n  ('def', '\\\\n+(?=' + block.def.source + ')')\n  ();\n\nblock.blockquote = replace(block.blockquote)\n  ('def', block.def)\n  ();\n\nblock._tag = '(?!(?:'\n  + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code'\n  + '|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo'\n  + '|span|br|wbr|ins|del|img)\\\\b)\\\\w+(?!:/|[^\\\\w\\\\s@]*@)\\\\b';\n\nblock.html = replace(block.html)\n  ('comment', /<!--[\\s\\S]*?-->/)\n  ('closed', /<(tag)[\\s\\S]+?<\\/\\1>/)\n  ('closing', /<tag(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>/)\n  (/tag/g, block._tag)\n  ();\n\nblock.paragraph = replace(block.paragraph)\n  ('hr', block.hr)\n  ('heading', block.heading)\n  ('lheading', block.lheading)\n  ('blockquote', block.blockquote)\n  ('tag', '<' + block._tag)\n  ('def', block.def)\n  ();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = merge({}, block);\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = merge({}, block.normal, {\n  fences: /^ *(`{3,}|~{3,})[ \\.]*(\\S+)? *\\n([\\s\\S]*?)\\s*\\1 *(?:\\n+|$)/,\n  paragraph: /^/,\n  heading: /^ *(#{1,6}) +([^\\n]+?) *#* *(?:\\n+|$)/\n});\n\nblock.gfm.paragraph = replace(block.paragraph)\n  ('(?!', '(?!'\n    + block.gfm.fences.source.replace('\\\\1', '\\\\2') + '|'\n    + block.list.source.replace('\\\\1', '\\\\3') + '|')\n  ();\n\n/**\n * GFM + Tables Block Grammar\n */\n\nblock.tables = merge({}, block.gfm, {\n  nptable: /^ *(\\S.*\\|.*)\\n *([-:]+ *\\|[-| :]*)\\n((?:.*\\|.*(?:\\n|$))*)\\n*/,\n  table: /^ *\\|(.+)\\n *\\|( *[-:]+[-| :]*)\\n((?: *\\|.*(?:\\n|$))*)\\n*/\n});\n\n/**\n * Block Lexer\n */\n\nfunction Lexer(options) {\n  this.tokens = [];\n  this.tokens.links = {};\n  this.options = options || marked.defaults;\n  this.rules = block.normal;\n\n  if (this.options.gfm) {\n    if (this.options.tables) {\n      this.rules = block.tables;\n    } else {\n      this.rules = block.gfm;\n    }\n  }\n}\n\n/**\n * Expose Block Rules\n */\n\nLexer.rules = block;\n\n/**\n * Static Lex Method\n */\n\nLexer.lex = function(src, options) {\n  var lexer = new Lexer(options);\n  return lexer.lex(src);\n};\n\n/**\n * Preprocessing\n */\n\nLexer.prototype.lex = function(src) {\n  src = src\n    .replace(/\\r\\n|\\r/g, '\\n')\n    .replace(/\\t/g, '    ')\n    .replace(/\\u00a0/g, ' ')\n    .replace(/\\u2424/g, '\\n');\n\n  return this.token(src, true);\n};\n\n/**\n * Lexing\n */\n\nLexer.prototype.token = function(src, top, bq) {\n  var src = src.replace(/^ +$/gm, '')\n    , next\n    , loose\n    , cap\n    , bull\n    , b\n    , item\n    , space\n    , i\n    , l;\n\n  while (src) {\n    // newline\n    if (cap = this.rules.newline.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (cap[0].length > 1) {\n        this.tokens.push({\n          type: 'space'\n        });\n      }\n    }\n\n    // code\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      cap = cap[0].replace(/^ {4}/gm, '');\n      this.tokens.push({\n        type: 'code',\n        text: !this.options.pedantic\n          ? cap.replace(/\\n+$/, '')\n          : cap\n      });\n      continue;\n    }\n\n    // fences (gfm)\n    if (cap = this.rules.fences.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'code',\n        lang: cap[2],\n        text: cap[3] || ''\n      });\n      continue;\n    }\n\n    // heading\n    if (cap = this.rules.heading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[1].length,\n        text: cap[2]\n      });\n      continue;\n    }\n\n    // table no leading pipe (gfm)\n    if (top && (cap = this.rules.nptable.exec(src))) {\n      src = src.substring(cap[0].length);\n\n      item = {\n        type: 'table',\n        header: cap[1].replace(/^ *| *\\| *$/g, '').split(/ *\\| */),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        cells: cap[3].replace(/\\n$/, '').split('\\n')\n      };\n\n      for (i = 0; i < item.align.length; i++) {\n        if (/^ *-+: *$/.test(item.align[i])) {\n          item.align[i] = 'right';\n        } else if (/^ *:-+: *$/.test(item.align[i])) {\n          item.align[i] = 'center';\n        } else if (/^ *:-+ *$/.test(item.align[i])) {\n          item.align[i] = 'left';\n        } else {\n          item.align[i] = null;\n        }\n      }\n\n      for (i = 0; i < item.cells.length; i++) {\n        item.cells[i] = item.cells[i].split(/ *\\| */);\n      }\n\n      this.tokens.push(item);\n\n      continue;\n    }\n\n    // lheading\n    if (cap = this.rules.lheading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[2] === '=' ? 1 : 2,\n        text: cap[1]\n      });\n      continue;\n    }\n\n    // hr\n    if (cap = this.rules.hr.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'hr'\n      });\n      continue;\n    }\n\n    // blockquote\n    if (cap = this.rules.blockquote.exec(src)) {\n      src = src.substring(cap[0].length);\n\n      this.tokens.push({\n        type: 'blockquote_start'\n      });\n\n      cap = cap[0].replace(/^ *> ?/gm, '');\n\n      // Pass `top` to keep the current\n      // \"toplevel\" state. This is exactly\n      // how markdown.pl works.\n      this.token(cap, top, true);\n\n      this.tokens.push({\n        type: 'blockquote_end'\n      });\n\n      continue;\n    }\n\n    // list\n    if (cap = this.rules.list.exec(src)) {\n      src = src.substring(cap[0].length);\n      bull = cap[2];\n\n      this.tokens.push({\n        type: 'list_start',\n        ordered: bull.length > 1\n      });\n\n      // Get each top-level item.\n      cap = cap[0].match(this.rules.item);\n\n      next = false;\n      l = cap.length;\n      i = 0;\n\n      for (; i < l; i++) {\n        item = cap[i];\n\n        // Remove the list item's bullet\n        // so it is seen as the next token.\n        space = item.length;\n        item = item.replace(/^ *([*+-]|\\d+\\.) +/, '');\n\n        // Outdent whatever the\n        // list item contains. Hacky.\n        if (~item.indexOf('\\n ')) {\n          space -= item.length;\n          item = !this.options.pedantic\n            ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')\n            : item.replace(/^ {1,4}/gm, '');\n        }\n\n        // Determine whether the next list item belongs here.\n        // Backpedal if it does not belong in this list.\n        if (this.options.smartLists && i !== l - 1) {\n          b = block.bullet.exec(cap[i + 1])[0];\n          if (bull !== b && !(bull.length > 1 && b.length > 1)) {\n            src = cap.slice(i + 1).join('\\n') + src;\n            i = l - 1;\n          }\n        }\n\n        // Determine whether item is loose or not.\n        // Use: /(^|\\n)(?! )[^\\n]+\\n\\n(?!\\s*$)/\n        // for discount behavior.\n        loose = next || /\\n\\n(?!\\s*$)/.test(item);\n        if (i !== l - 1) {\n          next = item.charAt(item.length - 1) === '\\n';\n          if (!loose) loose = next;\n        }\n\n        this.tokens.push({\n          type: loose\n            ? 'loose_item_start'\n            : 'list_item_start'\n        });\n\n        // Recurse.\n        this.token(item, false, bq);\n\n        this.tokens.push({\n          type: 'list_item_end'\n        });\n      }\n\n      this.tokens.push({\n        type: 'list_end'\n      });\n\n      continue;\n    }\n\n    // html\n    if (cap = this.rules.html.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: this.options.sanitize\n          ? 'paragraph'\n          : 'html',\n        pre: !this.options.sanitizer\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      });\n      continue;\n    }\n\n    // def\n    if ((!bq && top) && (cap = this.rules.def.exec(src))) {\n      src = src.substring(cap[0].length);\n      this.tokens.links[cap[1].toLowerCase()] = {\n        href: cap[2],\n        title: cap[3]\n      };\n      continue;\n    }\n\n    // table (gfm)\n    if (top && (cap = this.rules.table.exec(src))) {\n      src = src.substring(cap[0].length);\n\n      item = {\n        type: 'table',\n        header: cap[1].replace(/^ *| *\\| *$/g, '').split(/ *\\| */),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        cells: cap[3].replace(/(?: *\\| *)?\\n$/, '').split('\\n')\n      };\n\n      for (i = 0; i < item.align.length; i++) {\n        if (/^ *-+: *$/.test(item.align[i])) {\n          item.align[i] = 'right';\n        } else if (/^ *:-+: *$/.test(item.align[i])) {\n          item.align[i] = 'center';\n        } else if (/^ *:-+ *$/.test(item.align[i])) {\n          item.align[i] = 'left';\n        } else {\n          item.align[i] = null;\n        }\n      }\n\n      for (i = 0; i < item.cells.length; i++) {\n        item.cells[i] = item.cells[i]\n          .replace(/^ *\\| *| *\\| *$/g, '')\n          .split(/ *\\| */);\n      }\n\n      this.tokens.push(item);\n\n      continue;\n    }\n\n    // top-level paragraph\n    if (top && (cap = this.rules.paragraph.exec(src))) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'paragraph',\n        text: cap[1].charAt(cap[1].length - 1) === '\\n'\n          ? cap[1].slice(0, -1)\n          : cap[1]\n      });\n      continue;\n    }\n\n    // text\n    if (cap = this.rules.text.exec(src)) {\n      // Top-level should never reach here.\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'text',\n        text: cap[0]\n      });\n      continue;\n    }\n\n    if (src) {\n      throw new\n        Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return this.tokens;\n};\n\n/**\n * Inline-Level Grammar\n */\n\nvar inline = {\n  escape: /^\\\\([\\\\`*{}\\[\\]()#+\\-.!_>])/,\n  autolink: /^<([^ >]+(@|:\\/)[^ >]+)>/,\n  url: noop,\n  tag: /^<!--[\\s\\S]*?-->|^<\\/?\\w+(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>/,\n  link: /^!?\\[(inside)\\]\\(href\\)/,\n  reflink: /^!?\\[(inside)\\]\\s*\\[([^\\]]*)\\]/,\n  nolink: /^!?\\[((?:\\[[^\\]]*\\]|[^\\[\\]])*)\\]/,\n  strong: /^__([\\s\\S]+?)__(?!_)|^\\*\\*([\\s\\S]+?)\\*\\*(?!\\*)/,\n  em: /^\\b_((?:[^_]|__)+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,\n  code: /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/,\n  br: /^ {2,}\\n(?!\\s*$)/,\n  del: noop,\n  text: /^[\\s\\S]+?(?=[\\\\<!\\[_*`]| {2,}\\n|$)/\n};\n\ninline._inside = /(?:\\[[^\\]]*\\]|[^\\[\\]]|\\](?=[^\\[]*\\]))*/;\ninline._href = /\\s*<?([\\s\\S]*?)>?(?:\\s+['\"]([\\s\\S]*?)['\"])?\\s*/;\n\ninline.link = replace(inline.link)\n  ('inside', inline._inside)\n  ('href', inline._href)\n  ();\n\ninline.reflink = replace(inline.reflink)\n  ('inside', inline._inside)\n  ();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = merge({}, inline);\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = merge({}, inline.normal, {\n  strong: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n  em: /^_(?=\\S)([\\s\\S]*?\\S)_(?!_)|^\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)/\n});\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = merge({}, inline.normal, {\n  escape: replace(inline.escape)('])', '~|])')(),\n  url: /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/,\n  del: /^~~(?=\\S)([\\s\\S]*?\\S)~~/,\n  text: replace(inline.text)\n    (']|', '~]|')\n    ('|', '|https?://|')\n    ()\n});\n\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = merge({}, inline.gfm, {\n  br: replace(inline.br)('{2,}', '*')(),\n  text: replace(inline.gfm.text)('{2,}', '*')()\n});\n\n/**\n * Inline Lexer & Compiler\n */\n\nfunction InlineLexer(links, options) {\n  this.options = options || marked.defaults;\n  this.links = links;\n  this.rules = inline.normal;\n  this.renderer = this.options.renderer || new Renderer;\n  this.renderer.options = this.options;\n\n  if (!this.links) {\n    throw new\n      Error('Tokens array requires a `links` property.');\n  }\n\n  if (this.options.gfm) {\n    if (this.options.breaks) {\n      this.rules = inline.breaks;\n    } else {\n      this.rules = inline.gfm;\n    }\n  } else if (this.options.pedantic) {\n    this.rules = inline.pedantic;\n  }\n}\n\n/**\n * Expose Inline Rules\n */\n\nInlineLexer.rules = inline;\n\n/**\n * Static Lexing/Compiling Method\n */\n\nInlineLexer.output = function(src, links, options) {\n  var inline = new InlineLexer(links, options);\n  return inline.output(src);\n};\n\n/**\n * Lexing/Compiling\n */\n\nInlineLexer.prototype.output = function(src) {\n  var out = ''\n    , link\n    , text\n    , href\n    , cap;\n\n  while (src) {\n    // escape\n    if (cap = this.rules.escape.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += cap[1];\n      continue;\n    }\n\n    // autolink\n    if (cap = this.rules.autolink.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (cap[2] === '@') {\n        text = cap[1].charAt(6) === ':'\n          ? this.mangle(cap[1].substring(7))\n          : this.mangle(cap[1]);\n        href = this.mangle('mailto:') + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n      out += this.renderer.link(href, null, text);\n      continue;\n    }\n\n    // url (gfm)\n    if (!this.inLink && (cap = this.rules.url.exec(src))) {\n      src = src.substring(cap[0].length);\n      text = escape(cap[1]);\n      href = text;\n      out += this.renderer.link(href, null, text);\n      continue;\n    }\n\n    // tag\n    if (cap = this.rules.tag.exec(src)) {\n      if (!this.inLink && /^<a /i.test(cap[0])) {\n        this.inLink = true;\n      } else if (this.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.inLink = false;\n      }\n      src = src.substring(cap[0].length);\n      out += this.options.sanitize\n        ? this.options.sanitizer\n          ? this.options.sanitizer(cap[0])\n          : escape(cap[0])\n        : cap[0]\n      continue;\n    }\n\n    // link\n    if (cap = this.rules.link.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.inLink = true;\n      out += this.outputLink(cap, {\n        href: cap[2],\n        title: cap[3]\n      });\n      this.inLink = false;\n      continue;\n    }\n\n    // reflink, nolink\n    if ((cap = this.rules.reflink.exec(src))\n        || (cap = this.rules.nolink.exec(src))) {\n      src = src.substring(cap[0].length);\n      link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = this.links[link.toLowerCase()];\n      if (!link || !link.href) {\n        out += cap[0].charAt(0);\n        src = cap[0].substring(1) + src;\n        continue;\n      }\n      this.inLink = true;\n      out += this.outputLink(cap, link);\n      this.inLink = false;\n      continue;\n    }\n\n    // strong\n    if (cap = this.rules.strong.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.strong(this.output(cap[2] || cap[1]));\n      continue;\n    }\n\n    // em\n    if (cap = this.rules.em.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.em(this.output(cap[2] || cap[1]));\n      continue;\n    }\n\n    // code\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.codespan(escape(cap[2], true));\n      continue;\n    }\n\n    // br\n    if (cap = this.rules.br.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.br();\n      continue;\n    }\n\n    // del (gfm)\n    if (cap = this.rules.del.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.del(this.output(cap[1]));\n      continue;\n    }\n\n    // text\n    if (cap = this.rules.text.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.text(escape(this.smartypants(cap[0])));\n      continue;\n    }\n\n    if (src) {\n      throw new\n        Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return out;\n};\n\n/**\n * Compile Link\n */\n\nInlineLexer.prototype.outputLink = function(cap, link) {\n  var href = escape(link.href)\n    , title = link.title ? escape(link.title) : null;\n\n  return cap[0].charAt(0) !== '!'\n    ? this.renderer.link(href, title, this.output(cap[1]))\n    : this.renderer.image(href, title, escape(cap[1]));\n};\n\n/**\n * Smartypants Transformations\n */\n\nInlineLexer.prototype.smartypants = function(text) {\n  if (!this.options.smartypants) return text;\n  return text\n    // em-dashes\n    .replace(/---/g, '\\u2014')\n    // en-dashes\n    .replace(/--/g, '\\u2013')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n};\n\n/**\n * Mangle Links\n */\n\nInlineLexer.prototype.mangle = function(text) {\n  if (!this.options.mangle) return text;\n  var out = ''\n    , l = text.length\n    , i = 0\n    , ch;\n\n  for (; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n};\n\n/**\n * Renderer\n */\n\nfunction Renderer(options) {\n  this.options = options || {};\n}\n\nRenderer.prototype.code = function(code, lang, escaped) {\n  if (this.options.highlight) {\n    var out = this.options.highlight(code, lang);\n    if (out != null && out !== code) {\n      escaped = true;\n      code = out;\n    }\n  }\n\n  if (!lang) {\n    return '<pre><code>'\n      + (escaped ? code : escape(code, true))\n      + '\\n</code></pre>';\n  }\n\n  return '<pre><code class=\"'\n    + this.options.langPrefix\n    + escape(lang, true)\n    + '\">'\n    + (escaped ? code : escape(code, true))\n    + '\\n</code></pre>\\n';\n};\n\nRenderer.prototype.blockquote = function(quote) {\n  return '<blockquote>\\n' + quote + '</blockquote>\\n';\n};\n\nRenderer.prototype.html = function(html) {\n  return html;\n};\n\nRenderer.prototype.heading = function(text, level, raw) {\n  return '<h'\n    + level\n    + ' id=\"'\n    + this.options.headerPrefix\n    + raw.toLowerCase().replace(/[^\\w]+/g, '-')\n    + '\">'\n    + text\n    + '</h'\n    + level\n    + '>\\n';\n};\n\nRenderer.prototype.hr = function() {\n  return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n};\n\nRenderer.prototype.list = function(body, ordered) {\n  var type = ordered ? 'ol' : 'ul';\n  return '<' + type + '>\\n' + body + '</' + type + '>\\n';\n};\n\nRenderer.prototype.listitem = function(text) {\n  return '<li>' + text + '</li>\\n';\n};\n\nRenderer.prototype.paragraph = function(text) {\n  return '<p>' + text + '</p>\\n';\n};\n\nRenderer.prototype.table = function(header, body) {\n  return '<table>\\n'\n    + '<thead>\\n'\n    + header\n    + '</thead>\\n'\n    + '<tbody>\\n'\n    + body\n    + '</tbody>\\n'\n    + '</table>\\n';\n};\n\nRenderer.prototype.tablerow = function(content) {\n  return '<tr>\\n' + content + '</tr>\\n';\n};\n\nRenderer.prototype.tablecell = function(content, flags) {\n  var type = flags.header ? 'th' : 'td';\n  var tag = flags.align\n    ? '<' + type + ' style=\"text-align:' + flags.align + '\">'\n    : '<' + type + '>';\n  return tag + content + '</' + type + '>\\n';\n};\n\n// span level renderer\nRenderer.prototype.strong = function(text) {\n  return '<strong>' + text + '</strong>';\n};\n\nRenderer.prototype.em = function(text) {\n  return '<em>' + text + '</em>';\n};\n\nRenderer.prototype.codespan = function(text) {\n  return '<code>' + text + '</code>';\n};\n\nRenderer.prototype.br = function() {\n  return this.options.xhtml ? '<br/>' : '<br>';\n};\n\nRenderer.prototype.del = function(text) {\n  return '<del>' + text + '</del>';\n};\n\nRenderer.prototype.link = function(href, title, text) {\n  if (this.options.sanitize) {\n    try {\n      var prot = decodeURIComponent(unescape(href))\n        .replace(/[^\\w:]/g, '')\n        .toLowerCase();\n    } catch (e) {\n      return '';\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0) {\n      return '';\n    }\n  }\n  var out = '<a href=\"' + href + '\"';\n  if (title) {\n    out += ' title=\"' + title + '\"';\n  }\n  out += '>' + text + '</a>';\n  return out;\n};\n\nRenderer.prototype.image = function(href, title, text) {\n  var out = '<img src=\"' + href + '\" alt=\"' + text + '\"';\n  if (title) {\n    out += ' title=\"' + title + '\"';\n  }\n  out += this.options.xhtml ? '/>' : '>';\n  return out;\n};\n\nRenderer.prototype.text = function(text) {\n  return text;\n};\n\n/**\n * Parsing & Compiling\n */\n\nfunction Parser(options) {\n  this.tokens = [];\n  this.token = null;\n  this.options = options || marked.defaults;\n  this.options.renderer = this.options.renderer || new Renderer;\n  this.renderer = this.options.renderer;\n  this.renderer.options = this.options;\n}\n\n/**\n * Static Parse Method\n */\n\nParser.parse = function(src, options, renderer) {\n  var parser = new Parser(options, renderer);\n  return parser.parse(src);\n};\n\n/**\n * Parse Loop\n */\n\nParser.prototype.parse = function(src) {\n  this.inline = new InlineLexer(src.links, this.options, this.renderer);\n  this.tokens = src.reverse();\n\n  var out = '';\n  while (this.next()) {\n    out += this.tok();\n  }\n\n  return out;\n};\n\n/**\n * Next Token\n */\n\nParser.prototype.next = function() {\n  return this.token = this.tokens.pop();\n};\n\n/**\n * Preview Next Token\n */\n\nParser.prototype.peek = function() {\n  return this.tokens[this.tokens.length - 1] || 0;\n};\n\n/**\n * Parse Text Tokens\n */\n\nParser.prototype.parseText = function() {\n  var body = this.token.text;\n\n  while (this.peek().type === 'text') {\n    body += '\\n' + this.next().text;\n  }\n\n  return this.inline.output(body);\n};\n\n/**\n * Parse Current Token\n */\n\nParser.prototype.tok = function() {\n  switch (this.token.type) {\n    case 'space': {\n      return '';\n    }\n    case 'hr': {\n      return this.renderer.hr();\n    }\n    case 'heading': {\n      return this.renderer.heading(\n        this.inline.output(this.token.text),\n        this.token.depth,\n        this.token.text);\n    }\n    case 'code': {\n      return this.renderer.code(this.token.text,\n        this.token.lang,\n        this.token.escaped);\n    }\n    case 'table': {\n      var header = ''\n        , body = ''\n        , i\n        , row\n        , cell\n        , flags\n        , j;\n\n      // header\n      cell = '';\n      for (i = 0; i < this.token.header.length; i++) {\n        flags = { header: true, align: this.token.align[i] };\n        cell += this.renderer.tablecell(\n          this.inline.output(this.token.header[i]),\n          { header: true, align: this.token.align[i] }\n        );\n      }\n      header += this.renderer.tablerow(cell);\n\n      for (i = 0; i < this.token.cells.length; i++) {\n        row = this.token.cells[i];\n\n        cell = '';\n        for (j = 0; j < row.length; j++) {\n          cell += this.renderer.tablecell(\n            this.inline.output(row[j]),\n            { header: false, align: this.token.align[j] }\n          );\n        }\n\n        body += this.renderer.tablerow(cell);\n      }\n      return this.renderer.table(header, body);\n    }\n    case 'blockquote_start': {\n      var body = '';\n\n      while (this.next().type !== 'blockquote_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.blockquote(body);\n    }\n    case 'list_start': {\n      var body = ''\n        , ordered = this.token.ordered;\n\n      while (this.next().type !== 'list_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.list(body, ordered);\n    }\n    case 'list_item_start': {\n      var body = '';\n\n      while (this.next().type !== 'list_item_end') {\n        body += this.token.type === 'text'\n          ? this.parseText()\n          : this.tok();\n      }\n\n      return this.renderer.listitem(body);\n    }\n    case 'loose_item_start': {\n      var body = '';\n\n      while (this.next().type !== 'list_item_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.listitem(body);\n    }\n    case 'html': {\n      var html = !this.token.pre && !this.options.pedantic\n        ? this.inline.output(this.token.text)\n        : this.token.text;\n      return this.renderer.html(html);\n    }\n    case 'paragraph': {\n      return this.renderer.paragraph(this.inline.output(this.token.text));\n    }\n    case 'text': {\n      return this.renderer.paragraph(this.parseText());\n    }\n  }\n};\n\n/**\n * Helpers\n */\n\nfunction escape(html, encode) {\n  return html\n    .replace(!encode ? /&(?!#?\\w+;)/g : /&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#39;');\n}\n\nfunction unescape(html) {\n\t// explicitly match decimal, hex, and named HTML entities \n  return html.replace(/&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/g, function(_, n) {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nfunction replace(regex, opt) {\n  regex = regex.source;\n  opt = opt || '';\n  return function self(name, val) {\n    if (!name) return new RegExp(regex, opt);\n    val = val.source || val;\n    val = val.replace(/(^|[^\\[])\\^/g, '$1');\n    regex = regex.replace(name, val);\n    return self;\n  };\n}\n\nfunction noop() {}\nnoop.exec = noop;\n\nfunction merge(obj) {\n  var i = 1\n    , target\n    , key;\n\n  for (; i < arguments.length; i++) {\n    target = arguments[i];\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n\n  return obj;\n}\n\n\n/**\n * Marked\n */\n\nfunction marked(src, opt, callback) {\n  if (callback || typeof opt === 'function') {\n    if (!callback) {\n      callback = opt;\n      opt = null;\n    }\n\n    opt = merge({}, marked.defaults, opt || {});\n\n    var highlight = opt.highlight\n      , tokens\n      , pending\n      , i = 0;\n\n    try {\n      tokens = Lexer.lex(src, opt)\n    } catch (e) {\n      return callback(e);\n    }\n\n    pending = tokens.length;\n\n    var done = function(err) {\n      if (err) {\n        opt.highlight = highlight;\n        return callback(err);\n      }\n\n      var out;\n\n      try {\n        out = Parser.parse(tokens, opt);\n      } catch (e) {\n        err = e;\n      }\n\n      opt.highlight = highlight;\n\n      return err\n        ? callback(err)\n        : callback(null, out);\n    };\n\n    if (!highlight || highlight.length < 3) {\n      return done();\n    }\n\n    delete opt.highlight;\n\n    if (!pending) return done();\n\n    for (; i < tokens.length; i++) {\n      (function(token) {\n        if (token.type !== 'code') {\n          return --pending || done();\n        }\n        return highlight(token.text, token.lang, function(err, code) {\n          if (err) return done(err);\n          if (code == null || code === token.text) {\n            return --pending || done();\n          }\n          token.text = code;\n          token.escaped = true;\n          --pending || done();\n        });\n      })(tokens[i]);\n    }\n\n    return;\n  }\n  try {\n    if (opt) opt = merge({}, marked.defaults, opt);\n    return Parser.parse(Lexer.lex(src, opt), opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/chjj/marked.';\n    if ((opt || marked.defaults).silent) {\n      return '<p>An error occured:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n}\n\n/**\n * Options\n */\n\nmarked.options =\nmarked.setOptions = function(opt) {\n  merge(marked.defaults, opt);\n  return marked;\n};\n\nmarked.defaults = {\n  gfm: true,\n  tables: true,\n  breaks: false,\n  pedantic: false,\n  sanitize: false,\n  sanitizer: null,\n  mangle: true,\n  smartLists: false,\n  silent: false,\n  highlight: null,\n  langPrefix: 'lang-',\n  smartypants: false,\n  headerPrefix: '',\n  renderer: new Renderer,\n  xhtml: false\n};\n\n/**\n * Expose\n */\n\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\n\nmarked.Renderer = Renderer;\n\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\n\nmarked.InlineLexer = InlineLexer;\nmarked.inlineLexer = InlineLexer.output;\n\nmarked.parse = marked;\n\nif (typeof module !== 'undefined' && typeof exports === 'object') {\n  module.exports = marked;\n} else if (typeof define === 'function' && define.amd) {\n  define(function() { return marked; });\n} else {\n  this.marked = marked;\n}\n\n}).call(function() {\n  return this || (typeof window !== 'undefined' ? window : global);\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/marked/lib/marked.js\n// module id = 2\n// module chunks = 0","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 3\n// module chunks = 0","export default class Parser {\n  constructor(src: TokensList, options?: ParserOptions) {\n\n  }\n\n  parse(src: TokensList, options?: ParserOptions): string {\n    return '';\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/parser/index.ts","export default class Renderer {\n  constructor(options?: RendererOptions) {\n\n  }\n\n  code(code: string, language: string, isEscaped: boolean): string {\n    return '';\n  }\n\n  blockquote(quote: string): string {\n    return '';\n  }\n\n  html(html: string): string {\n    return '';\n  }\n\n  heading(text: string, level: number, raw: string): string {\n    return '';\n  }\n\n  hr(): string {\n    return '';\n  }\n\n  list(body: string, ordered: boolean): string {\n    return '';\n  }\n\n  listitem(text: string): string {\n    return '';\n  }\n\n  paragraph(text: string): string {\n    return '';\n  }\n\n  table(header: string, body: string): string {\n    return '';\n  }\n\n  tablerow(content: string): string {\n    return '';\n  }\n\n  tablecell(content: string, flags: {\n    header: boolean;\n    align: 'center' | 'left' | 'right' | null;\n  }): string {\n    return '';\n  }\n\n  strong(text: string): string {\n    return '';\n  }\n\n  em(text: string): string {\n    return '';\n  }\n\n  codespan(code: string): string {\n    return '';\n  }\n\n  br(): string {\n    return '';\n  }\n\n  del(text: string): string {\n    return '';\n  }\n\n  link(href: string, title: string, text: string): string {\n    return '';\n  }\n\n  image(href: string, title: string, text: string): string {\n    return '';\n  }\n\n  text(text: string): string {\n    return '';\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/renderer/index.ts"],"sourceRoot":""}