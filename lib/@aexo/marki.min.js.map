{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///@aexo/marki.min.js","webpack:///webpack/bootstrap 4f83ef435c157ec6418a","webpack:///./src/main.js","webpack:///./node_modules/marked/lib/marked.js","webpack:///(webpack)/buildin/global.js"],"names":["root","factory","exports","module","define","amd","self","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","value","_marked","_marked2","obj","default","marki","loadConfig","global","Lexer","options","tokens","links","marked","defaults","rules","block","normal","gfm","tables","InlineLexer","inline","renderer","Renderer","Error","breaks","pedantic","Parser","token","escape","html","encode","replace","unescape","_","toLowerCase","charAt","String","fromCharCode","parseInt","substring","regex","opt","source","val","RegExp","resolveUrl","base","href","baseUrls","test","slice","noop","merge","target","key","arguments","length","src","callback","pending","highlight","lex","e","done","err","out","parse","type","text","lang","code","escaped","message","silent","newline","fences","hr","heading","nptable","lheading","blockquote","list","def","table","paragraph","bullet","item","_tag","top","bq","next","loose","cap","bull","b","space","exec","push","depth","header","split","align","cells","ordered","match","indexOf","smartLists","join","sanitize","pre","sanitizer","title","charCodeAt","autolink","url","tag","link","reflink","nolink","strong","em","br","del","_inside","_href","output","mangle","inLink","outputLink","codespan","trim","smartypants","image","ch","Math","random","toString","langPrefix","quote","level","raw","headerPrefix","xhtml","body","listitem","tablerow","content","tablecell","flags","prot","decodeURIComponent","baseUrl","originIndependentUrl","reverse","tok","pop","peek","parseText","row","cell","j","setOptions","parser","lexer","inlineLexer","window","g","Function","eval"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,UAAAH,GACA,gBAAAC,SACAA,QAAA,eAAAD,IAEAD,EAAA,eAAAC,KACC,mBAAAK,WAAAC,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAR,OAGA,IAAAC,GAAAQ,EAAAD,IACAE,EAAAF,EACAG,GAAA,EACAX,WAUA,OANAM,GAAAE,GAAAI,KAAAX,EAAAD,QAAAC,IAAAD,QAAAO,GAGAN,EAAAU,GAAA,EAGAV,EAAAD,QAvBA,GAAAS,KA4DA,OAhCAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,SAAAf,EAAAgB,EAAAC,GACAV,EAAAW,EAAAlB,EAAAgB,IACAG,OAAAC,eAAApB,EAAAgB,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAAvB,GACA,GAAAgB,GAAAhB,KAAAwB,WACA,WAA2B,MAAAxB,GAAA,SAC3B,WAAiC,MAAAA,GAEjC,OADAM,GAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAQ,EAAAC,GAAsD,MAAAR,QAAAS,UAAAC,eAAAjB,KAAAc,EAAAC,IAGtDpB,EAAAuB,EAAA,GAGAvB,IAAAwB,EAAA,KDgBM,SAAU9B,EAAQD,EAASO,GAEjC,YAGAY,QAAOC,eAAepB,EAAS,cAC7BgC,OAAO,GEnFT,IAAAC,GAAA1B,EAAA,GFwFI2B,EAEJ,SAAgCC,GAAO,MAAOA,IAAOA,EAAIV,WAAaU,GAAQC,QAASD,IAFjDF,GEtFlCI,WAEJA,GAAMC,WAAa,aF4FnBtC,EAAQoC,QExFOC,GF4FT,SAAUpC,EAAQD,EAASO,IGpGjC,SAAAgC,IAMC,WA2FD,QAAAC,GAAAC,GACApC,KAAAqC,UACArC,KAAAqC,OAAAC,SACAtC,KAAAoC,WAAAG,EAAAC,SACAxC,KAAAyC,MAAAC,EAAAC,OAEA3C,KAAAoC,QAAAQ,MACA5C,KAAAoC,QAAAS,OACA7C,KAAAyC,MAAAC,EAAAG,OAEA7C,KAAAyC,MAAAC,EAAAE,KAwZA,QAAAE,GAAAR,EAAAF,GAOA,GANApC,KAAAoC,WAAAG,EAAAC,SACAxC,KAAAsC,QACAtC,KAAAyC,MAAAM,EAAAJ,OACA3C,KAAAgD,SAAAhD,KAAAoC,QAAAY,UAAA,GAAAC,GACAjD,KAAAgD,SAAAZ,QAAApC,KAAAoC,SAEApC,KAAAsC,MACA,SACAY,OAAA,4CAGAlD,MAAAoC,QAAAQ,IACA5C,KAAAoC,QAAAe,OACAnD,KAAAyC,MAAAM,EAAAI,OAEAnD,KAAAyC,MAAAM,EAAAH,IAEG5C,KAAAoC,QAAAgB,WACHpD,KAAAyC,MAAAM,EAAAK,UA+NA,QAAAH,GAAAb,GACApC,KAAAoC,cAwJA,QAAAiB,GAAAjB,GACApC,KAAAqC,UACArC,KAAAsD,MAAA,KACAtD,KAAAoC,WAAAG,EAAAC,SACAxC,KAAAoC,QAAAY,SAAAhD,KAAAoC,QAAAY,UAAA,GAAAC,GACAjD,KAAAgD,SAAAhD,KAAAoC,QAAAY,SACAhD,KAAAgD,SAAAZ,QAAApC,KAAAoC,QA8KA,QAAAmB,GAAAC,EAAAC,GACA,MAAAD,GACAE,QAAAD,EAAkC,KAAlC,eAAkC,SAClCC,QAAA,aACAA,QAAA,aACAA,QAAA,eACAA,QAAA,cAGA,QAAAC,GAAAH,GAEA,MAAAA,GAAAE,QAAA,6CAA8D,SAAAE,EAAAzC,GAE9D,MADAA,KAAA0C,cACA,UAAA1C,EAAA,IACA,MAAAA,EAAA2C,OAAA,GACA,MAAA3C,EAAA2C,OAAA,GACAC,OAAAC,aAAAC,SAAA9C,EAAA+C,UAAA,QACAH,OAAAC,cAAA7C,EAAA+C,UAAA,IAEA,KAIA,QAAAR,GAAAS,EAAAC,GAGA,MAFAD,KAAAE,OACAD,KAAA,GACA,QAAArE,GAAAY,EAAA2D,GACA,MAAA3D,IACA2D,IAAAD,QAAAC,EACAA,IAAAZ,QAAA,qBACAS,IAAAT,QAAA/C,EAAA2D,GACAvE,GAJA,GAAAwE,QAAAJ,EAAAC,IAQA,QAAAI,GAAAC,EAAAC,GAaA,MAZAC,UAAA,IAAAF,KAIA,oBAAAG,KAAAH,GACAE,SAAA,IAAAF,KAAA,IAEAE,SAAA,IAAAF,KAAAf,QAAA,eAGAe,EAAAE,SAAA,IAAAF,GAEA,OAAAC,EAAAG,MAAA,KACAJ,EAAAf,QAAA,aAAAgB,EACG,MAAAA,EAAAZ,OAAA,GACHW,EAAAf,QAAA,yBAAAgB,EAEAD,EAAAC,EAMA,QAAAI,MAGA,QAAAC,GAAAjD,GAKA,IAJA,GACAkD,GACAC,EAFA5E,EAAA,EAIQA,EAAA6E,UAAAC,OAAsB9E,IAAA,CAC9B2E,EAAAE,UAAA7E,EACA,KAAA4E,IAAAD,GACAlE,OAAAS,UAAAC,eAAAjB,KAAAyE,EAAAC,KACAnD,EAAAmD,GAAAD,EAAAC,IAKA,MAAAnD,GAQA,QAAAS,GAAA6C,EAAAhB,EAAAiB,GACA,GAAAA,GAAA,kBAAAjB,GAAA,CACAiB,IACAA,EAAAjB,EACAA,EAAA,MAGAA,EAAAW,KAAkBxC,EAAAC,SAAA4B,MAElB,IACA/B,GACAiD,EAFAC,EAAAnB,EAAAmB,UAGAlF,EAAA,CAEA,KACAgC,EAAAF,EAAAqD,IAAAJ,EAAAhB,GACK,MAAAqB,GACL,MAAAJ,GAAAI,GAGAH,EAAAjD,EAAA8C,MAEA,IAAAO,GAAA,SAAAC,GACA,GAAAA,EAEA,MADAvB,GAAAmB,YACAF,EAAAM,EAGA,IAAAC,EAEA,KACAA,EAAAvC,EAAAwC,MAAAxD,EAAA+B,GACO,MAAAqB,GACPE,EAAAF,EAKA,MAFArB,GAAAmB,YAEAI,EACAN,EAAAM,GACAN,EAAA,KAAAO,GAGA,KAAAL,KAAAJ,OAAA,EACA,MAAAO,IAKA,UAFAtB,GAAAmB,WAEAD,EAAA,MAAAI,IAEA,MAAUrF,EAAAgC,EAAA8C,OAAmB9E,KAC7B,SAAAiD,GACA,SAAAA,EAAAwC,OACAR,GAAAI,IAEAH,EAAAjC,EAAAyC,KAAAzC,EAAA0C,KAAA,SAAAL,EAAAM,GACA,MAAAN,GAAAD,EAAAC,GACA,MAAAM,OAAA3C,EAAAyC,OACAT,GAAAI,KAEApC,EAAAyC,KAAAE,EACA3C,EAAA4C,SAAA,SACAZ,GAAAI,SAEOrD,EAAAhC,QAKP,KAEA,MADA+D,OAAAW,KAA2BxC,EAAAC,SAAA4B,IAC3Bf,EAAAwC,MAAA1D,EAAAqD,IAAAJ,EAAAhB,MACG,MAAAqB,GAEH,GADAA,EAAAU,SAAA,2DACA/B,GAAA7B,EAAAC,UAAA4D,OACA,sCACA7C,EAAAkC,EAAAU,QAAA,OACA,QAEA,MAAAV,IA1tCA,GAAA/C,IACA2D,QAAA,OACAJ,KAAA,oBACAK,OAAAxB,EACAyB,GAAA,4BACAC,QAAA,wCACAC,QAAA3B,EACA4B,SAAA,oCACAC,WAAA,qCACAC,KAAA,gEACApD,KAAA,+EACAqD,IAAA,oEACAC,MAAAhC,EACAiC,UAAA,iEACAhB,KAAA,UAGArD,GAAAsE,OAAA,kBACAtE,EAAAuE,KAAA,6CACAvE,EAAAuE,KAAAvD,EAAAhB,EAAAuE,KAAA,MACA,QAAAvE,EAAAsE,UAGAtE,EAAAkE,KAAAlD,EAAAhB,EAAAkE,MACA,QAAAlE,EAAAsE,QACA,8CACA,gBAAAtE,EAAAmE,IAAAxC,OAAA,OAGA3B,EAAAwE,KAAA,qKAKAxE,EAAAc,KAAAE,EAAAhB,EAAAc,MACA,6BACA,iCACA,+CACA,OAAAd,EAAAwE,QAGAxE,EAAAqE,UAAArD,EAAAhB,EAAAqE,WACA,KAAArE,EAAA6D,IACA,UAAA7D,EAAA8D,SACA,WAAA9D,EAAAgE,UACA,aAAAhE,EAAAiE,YACA,UAAAjE,EAAAwE,MACA,MAAAxE,EAAAmE,OAOAnE,EAAAC,OAAAoC,KAAuBrC,GAMvBA,EAAAE,IAAAmC,KAAoBrC,EAAAC,QACpB2D,OAAA,6DACAS,UAAA,IACAP,QAAA,0CAGA9D,EAAAE,IAAAmE,UAAArD,EAAAhB,EAAAqE,WACA,YACArE,EAAAE,IAAA0D,OAAAjC,OAAAX,QAAA,iBACAhB,EAAAkE,KAAAvC,OAAAX,QAAA,oBAOAhB,EAAAG,OAAAkC,KAAuBrC,EAAAE,KACvB6D,QAAA,gEACAK,MAAA,8DA0BA3E,EAAAM,MAAAC,EAMAP,EAAAqD,IAAA,SAAAJ,EAAAhD,GAEA,MADA,IAAAD,GAAAC,GACAoD,IAAAJ,IAOAjD,EAAAZ,UAAAiE,IAAA,SAAAJ,GAOA,MANAA,KACA1B,QAAA,iBACAA,QAAA,cACAA,QAAA,eACAA,QAAA,gBAEA1D,KAAAsD,MAAA8B,GAAA,IAOAjD,EAAAZ,UAAA+B,MAAA,SAAA8B,EAAA+B,EAAAC,GAYA,IAXA,GACAC,GACAC,EACAC,EACAC,EACAC,EACAR,EACAS,EACArH,EACAC,EATA8E,IAAA1B,QAAA,aAWA0B,GAYA,IAVAmC,EAAAvH,KAAAyC,MAAA4D,QAAAsB,KAAAvC,MACAA,IAAAlB,UAAAqD,EAAA,GAAApC,QACAoC,EAAA,GAAApC,OAAA,GACAnF,KAAAqC,OAAAuF,MACA9B,KAAA,WAMAyB,EAAAvH,KAAAyC,MAAAwD,KAAA0B,KAAAvC,GACAA,IAAAlB,UAAAqD,EAAA,GAAApC,QACAoC,IAAA,GAAA7D,QAAA,UAAiC,IACjC1D,KAAAqC,OAAAuF,MACA9B,KAAA,OACAC,KAAA/F,KAAAoC,QAAAgB,SAEAmE,EADAA,EAAA7D,QAAA,iBAOA,IAAA6D,EAAAvH,KAAAyC,MAAA6D,OAAAqB,KAAAvC,GACAA,IAAAlB,UAAAqD,EAAA,GAAApC,QACAnF,KAAAqC,OAAAuF,MACA9B,KAAA,OACAE,KAAAuB,EAAA,GACAxB,KAAAwB,EAAA,aAMA,IAAAA,EAAAvH,KAAAyC,MAAA+D,QAAAmB,KAAAvC,GACAA,IAAAlB,UAAAqD,EAAA,GAAApC,QACAnF,KAAAqC,OAAAuF,MACA9B,KAAA,UACA+B,MAAAN,EAAA,GAAApC,OACAY,KAAAwB,EAAA,SAMA,IAAAJ,IAAAI,EAAAvH,KAAAyC,MAAAgE,QAAAkB,KAAAvC,IAAA,CAUA,IATAA,IAAAlB,UAAAqD,EAAA,GAAApC,QAEA8B,GACAnB,KAAA,QACAgC,OAAAP,EAAA,GAAA7D,QAAA,mBAAAqE,MAAA,UACAC,MAAAT,EAAA,GAAA7D,QAAA,iBAAAqE,MAAA,UACAE,MAAAV,EAAA,GAAA7D,QAAA,UAAAqE,MAAA,OAGA1H,EAAA,EAAiBA,EAAA4G,EAAAe,MAAA7C,OAAuB9E,IACxC,YAAAuE,KAAAqC,EAAAe,MAAA3H,IACA4G,EAAAe,MAAA3H,GAAA,QACS,aAAAuE,KAAAqC,EAAAe,MAAA3H,IACT4G,EAAAe,MAAA3H,GAAA,SACS,YAAAuE,KAAAqC,EAAAe,MAAA3H,IACT4G,EAAAe,MAAA3H,GAAA,OAEA4G,EAAAe,MAAA3H,GAAA,IAIA,KAAAA,EAAA,EAAiBA,EAAA4G,EAAAgB,MAAA9C,OAAuB9E,IACxC4G,EAAAgB,MAAA5H,GAAA4G,EAAAgB,MAAA5H,GAAA0H,MAAA,SAGA/H,MAAAqC,OAAAuF,KAAAX,OAMA,IAAAM,EAAAvH,KAAAyC,MAAAiE,SAAAiB,KAAAvC,GACAA,IAAAlB,UAAAqD,EAAA,GAAApC,QACAnF,KAAAqC,OAAAuF,MACA9B,KAAA,UACA+B,MAAA,MAAAN,EAAA,OACAxB,KAAAwB,EAAA,SAMA,IAAAA,EAAAvH,KAAAyC,MAAA8D,GAAAoB,KAAAvC,GACAA,IAAAlB,UAAAqD,EAAA,GAAApC,QACAnF,KAAAqC,OAAAuF,MACA9B,KAAA,WAMA,IAAAyB,EAAAvH,KAAAyC,MAAAkE,WAAAgB,KAAAvC,GACAA,IAAAlB,UAAAqD,EAAA,GAAApC,QAEAnF,KAAAqC,OAAAuF,MACA9B,KAAA,qBAGAyB,IAAA,GAAA7D,QAAA,eAKA1D,KAAAsD,MAAAiE,EAAAJ,GAAA,GAEAnH,KAAAqC,OAAAuF,MACA9B,KAAA,uBAOA,IAAAyB,EAAAvH,KAAAyC,MAAAmE,KAAAe,KAAAvC,GAAA,CAgBA,IAfAA,IAAAlB,UAAAqD,EAAA,GAAApC,QACAqC,EAAAD,EAAA,GAEAvH,KAAAqC,OAAAuF,MACA9B,KAAA,aACAoC,QAAAV,EAAArC,OAAA,IAIAoC,IAAA,GAAAY,MAAAnI,KAAAyC,MAAAwE,MAEAI,GAAA,EACA/G,EAAAiH,EAAApC,OACA9E,EAAA,EAEYA,EAAAC,EAAOD,IACnB4G,EAAAM,EAAAlH,GAIAqH,EAAAT,EAAA9B,OACA8B,IAAAvD,QAAA,0BAIAuD,EAAAmB,QAAA,SACAV,GAAAT,EAAA9B,OACA8B,EAAAjH,KAAAoC,QAAAgB,SAEA6D,EAAAvD,QAAA,YAAmC,IADnCuD,EAAAvD,QAAA,GAAAa,QAAA,QAA0CmD,EAAA,IAAgB,WAM1D1H,KAAAoC,QAAAiG,YAAAhI,IAAAC,EAAA,IACAmH,EAAA/E,EAAAsE,OAAAW,KAAAJ,EAAAlH,EAAA,OACAmH,IAAAC,GAAAD,EAAArC,OAAA,GAAAsC,EAAAtC,OAAA,IACAC,EAAAmC,EAAA1C,MAAAxE,EAAA,GAAAiI,KAAA,MAAAlD,EACA/E,EAAAC,EAAA,IAOAgH,EAAAD,GAAA,eAAAzC,KAAAqC,GACA5G,IAAAC,EAAA,IACA+G,EAAA,OAAAJ,EAAAnD,OAAAmD,EAAA9B,OAAA,GACAmC,MAAAD,IAGArH,KAAAqC,OAAAuF,MACA9B,KAAAwB,EACA,mBACA,oBAIAtH,KAAAsD,MAAA2D,GAAA,EAAAG,GAEApH,KAAAqC,OAAAuF,MACA9B,KAAA,iBAIA9F,MAAAqC,OAAAuF,MACA9B,KAAA,iBAOA,IAAAyB,EAAAvH,KAAAyC,MAAAe,KAAAmE,KAAAvC,GACAA,IAAAlB,UAAAqD,EAAA,GAAApC,QACAnF,KAAAqC,OAAAuF,MACA9B,KAAA9F,KAAAoC,QAAAmG,SACA,YACA,OACAC,KAAAxI,KAAAoC,QAAAqG,YACA,QAAAlB,EAAA,eAAAA,EAAA,cAAAA,EAAA,IACAxB,KAAAwB,EAAA,SAMA,KAAAH,GAAAD,IAAAI,EAAAvH,KAAAyC,MAAAoE,IAAAc,KAAAvC,IACAA,IAAAlB,UAAAqD,EAAA,GAAApC,QACAnF,KAAAqC,OAAAC,MAAAiF,EAAA,GAAA1D,gBACAa,KAAA6C,EAAA,GACAmB,MAAAnB,EAAA,QAMA,IAAAJ,IAAAI,EAAAvH,KAAAyC,MAAAqE,MAAAa,KAAAvC,IAAA,CAUA,IATAA,IAAAlB,UAAAqD,EAAA,GAAApC,QAEA8B,GACAnB,KAAA,QACAgC,OAAAP,EAAA,GAAA7D,QAAA,mBAAAqE,MAAA,UACAC,MAAAT,EAAA,GAAA7D,QAAA,iBAAAqE,MAAA,UACAE,MAAAV,EAAA,GAAA7D,QAAA,qBAAAqE,MAAA,OAGA1H,EAAA,EAAiBA,EAAA4G,EAAAe,MAAA7C,OAAuB9E,IACxC,YAAAuE,KAAAqC,EAAAe,MAAA3H,IACA4G,EAAAe,MAAA3H,GAAA,QACS,aAAAuE,KAAAqC,EAAAe,MAAA3H,IACT4G,EAAAe,MAAA3H,GAAA,SACS,YAAAuE,KAAAqC,EAAAe,MAAA3H,IACT4G,EAAAe,MAAA3H,GAAA,OAEA4G,EAAAe,MAAA3H,GAAA,IAIA,KAAAA,EAAA,EAAiBA,EAAA4G,EAAAgB,MAAA9C,OAAuB9E,IACxC4G,EAAAgB,MAAA5H,GAAA4G,EAAAgB,MAAA5H,GACAqD,QAAA,uBACAqE,MAAA,SAGA/H,MAAAqC,OAAAuF,KAAAX,OAMA,IAAAE,IAAAI,EAAAvH,KAAAyC,MAAAsE,UAAAY,KAAAvC,IACAA,IAAAlB,UAAAqD,EAAA,GAAApC,QACAnF,KAAAqC,OAAAuF,MACA9B,KAAA,YACAC,KAAA,OAAAwB,EAAA,GAAAzD,OAAAyD,EAAA,GAAApC,OAAA,GACAoC,EAAA,GAAA1C,MAAA,MACA0C,EAAA,SAMA,IAAAA,EAAAvH,KAAAyC,MAAAsD,KAAA4B,KAAAvC,GAEAA,IAAAlB,UAAAqD,EAAA,GAAApC,QACAnF,KAAAqC,OAAAuF,MACA9B,KAAA,OACAC,KAAAwB,EAAA,SAKA,IAAAnC,EACA,SACAlC,OAAA,0BAAAkC,EAAAuD,WAAA,GAIA,OAAA3I,MAAAqC,OAOA,IAAAU,IACAQ,OAAA,8BACAqF,SAAA,2BACAC,IAAA/D,EACAgE,IAAA,yDACAC,KAAA,0BACAC,QAAA,iCACAC,OAAA,mCACAC,OAAA,iDACAC,GAAA,wDACAlD,KAAA,6BACAmD,GAAA,mBACAC,IAAAvE,EACAiB,KAAA,qCAGAhD,GAAAuG,QAAA,yCACAvG,EAAAwG,MAAA,iDAEAxG,EAAAgG,KAAArF,EAAAX,EAAAgG,MACA,SAAAhG,EAAAuG,SACA,OAAAvG,EAAAwG,SAGAxG,EAAAiG,QAAAtF,EAAAX,EAAAiG,SACA,SAAAjG,EAAAuG,WAOAvG,EAAAJ,OAAAoC,KAAwBhC,GAMxBA,EAAAK,SAAA2B,KAA0BhC,EAAAJ,QAC1BuG,OAAA,iEACAC,GAAA,6DAOApG,EAAAH,IAAAmC,KAAqBhC,EAAAJ,QACrBY,OAAAG,EAAAX,EAAAQ,QAAA,eACAsF,IAAA,uCACAQ,IAAA,0BACAtD,KAAArC,EAAAX,EAAAgD,MACA,YACA,uBAQAhD,EAAAI,OAAA4B,KAAwBhC,EAAAH,KACxBwG,GAAA1F,EAAAX,EAAAqG,IAAA,OAA8B,OAC9BrD,KAAArC,EAAAX,EAAAH,IAAAmD,MAAA,OAAsC,SAkCtCjD,EAAAL,MAAAM,EAMAD,EAAA0G,OAAA,SAAApE,EAAA9C,EAAAF,GAEA,MADA,IAAAU,GAAAR,EAAAF,GACAoH,OAAApE,IAOAtC,EAAAvB,UAAAiI,OAAA,SAAApE,GAOA,IANA,GACA2D,GACAhD,EACArB,EACA6C,EAJA3B,EAAA,GAMAR,GAEA,GAAAmC,EAAAvH,KAAAyC,MAAAc,OAAAoE,KAAAvC,GACAA,IAAAlB,UAAAqD,EAAA,GAAApC,QACAS,GAAA2B,EAAA,OAKA,IAAAA,EAAAvH,KAAAyC,MAAAmG,SAAAjB,KAAAvC,GACAA,IAAAlB,UAAAqD,EAAA,GAAApC,QACA,MAAAoC,EAAA,IACAxB,EAAAxC,EACA,MAAAgE,EAAA,GAAAzD,OAAA,GACA9D,KAAAyJ,OAAAlC,EAAA,GAAArD,UAAA,IACAlE,KAAAyJ,OAAAlC,EAAA,KAEA7C,EAAA1E,KAAAyJ,OAAA,WAAA1D,IAEAA,EAAAxC,EAAAgE,EAAA,IACA7C,EAAAqB,GAEAH,GAAA5F,KAAAgD,SAAA+F,KAAArE,EAAA,KAAAqB,OAKA,IAAA/F,KAAA0J,UAAAnC,EAAAvH,KAAAyC,MAAAoG,IAAAlB,KAAAvC,KASA,GAAAmC,EAAAvH,KAAAyC,MAAAqG,IAAAnB,KAAAvC,IACApF,KAAA0J,QAAA,QAAA9E,KAAA2C,EAAA,IACAvH,KAAA0J,QAAA,EACO1J,KAAA0J,QAAA,UAAA9E,KAAA2C,EAAA,MACPvH,KAAA0J,QAAA,GAEAtE,IAAAlB,UAAAqD,EAAA,GAAApC,QACAS,GAAA5F,KAAAoC,QAAAmG,SACAvI,KAAAoC,QAAAqG,UACAzI,KAAAoC,QAAAqG,UAAAlB,EAAA,IACAhE,EAAAgE,EAAA,IACAA,EAAA,OAKA,IAAAA,EAAAvH,KAAAyC,MAAAsG,KAAApB,KAAAvC,GACAA,IAAAlB,UAAAqD,EAAA,GAAApC,QACAnF,KAAA0J,QAAA,EACA9D,GAAA5F,KAAA2J,WAAApC,GACA7C,KAAA6C,EAAA,GACAmB,MAAAnB,EAAA,KAEAvH,KAAA0J,QAAA,MAKA,KAAAnC,EAAAvH,KAAAyC,MAAAuG,QAAArB,KAAAvC,MACAmC,EAAAvH,KAAAyC,MAAAwG,OAAAtB,KAAAvC,IADA,CAKA,GAHAA,IAAAlB,UAAAqD,EAAA,GAAApC,QACA4D,GAAAxB,EAAA,IAAAA,EAAA,IAAA7D,QAAA,cACAqF,EAAA/I,KAAAsC,MAAAyG,EAAAlF,kBACAkF,EAAArE,KAAA,CACAkB,GAAA2B,EAAA,GAAAzD,OAAA,GACAsB,EAAAmC,EAAA,GAAArD,UAAA,GAAAkB,CACA,UAEApF,KAAA0J,QAAA,EACA9D,GAAA5F,KAAA2J,WAAApC,EAAAwB,GACA/I,KAAA0J,QAAA,MAKA,IAAAnC,EAAAvH,KAAAyC,MAAAyG,OAAAvB,KAAAvC,GACAA,IAAAlB,UAAAqD,EAAA,GAAApC,QACAS,GAAA5F,KAAAgD,SAAAkG,OAAAlJ,KAAAwJ,OAAAjC,EAAA,IAAAA,EAAA,SAKA,IAAAA,EAAAvH,KAAAyC,MAAA0G,GAAAxB,KAAAvC,GACAA,IAAAlB,UAAAqD,EAAA,GAAApC,QACAS,GAAA5F,KAAAgD,SAAAmG,GAAAnJ,KAAAwJ,OAAAjC,EAAA,IAAAA,EAAA,SAKA,IAAAA,EAAAvH,KAAAyC,MAAAwD,KAAA0B,KAAAvC,GACAA,IAAAlB,UAAAqD,EAAA,GAAApC,QACAS,GAAA5F,KAAAgD,SAAA4G,SAAArG,EAAAgE,EAAA,GAAAsC,QAAA,QAKA,IAAAtC,EAAAvH,KAAAyC,MAAA2G,GAAAzB,KAAAvC,GACAA,IAAAlB,UAAAqD,EAAA,GAAApC,QACAS,GAAA5F,KAAAgD,SAAAoG,SAKA,IAAA7B,EAAAvH,KAAAyC,MAAA4G,IAAA1B,KAAAvC,GACAA,IAAAlB,UAAAqD,EAAA,GAAApC,QACAS,GAAA5F,KAAAgD,SAAAqG,IAAArJ,KAAAwJ,OAAAjC,EAAA,SAKA,IAAAA,EAAAvH,KAAAyC,MAAAsD,KAAA4B,KAAAvC,GACAA,IAAAlB,UAAAqD,EAAA,GAAApC,QACAS,GAAA5F,KAAAgD,SAAA+C,KAAAxC,EAAAvD,KAAA8J,YAAAvC,EAAA,UAIA,IAAAnC,EACA,SACAlC,OAAA,0BAAAkC,EAAAuD,WAAA,QAhGAvD,KAAAlB,UAAAqD,EAAA,GAAApC,QACAY,EAAAxC,EAAAgE,EAAA,IACA7C,EAAAqB,EACAH,GAAA5F,KAAAgD,SAAA+F,KAAArE,EAAA,KAAAqB,EAiGA,OAAAH,IAOA9C,EAAAvB,UAAAoI,WAAA,SAAApC,EAAAwB,GACA,GAAArE,GAAAnB,EAAAwF,EAAArE,MACAgE,EAAAK,EAAAL,MAAAnF,EAAAwF,EAAAL,OAAA,IAEA,aAAAnB,EAAA,GAAAzD,OAAA,GACA9D,KAAAgD,SAAA+F,KAAArE,EAAAgE,EAAA1I,KAAAwJ,OAAAjC,EAAA,KACAvH,KAAAgD,SAAA+G,MAAArF,EAAAgE,EAAAnF,EAAAgE,EAAA,MAOAzE,EAAAvB,UAAAuI,YAAA,SAAA/D,GACA,MAAA/F,MAAAoC,QAAA0H,YACA/D,EAEArC,QAAA,YAEAA,QAAA,WAEAA,QAAA,2BAA8B,OAE9BA,QAAA,UAEAA,QAAA,gCAA8B,OAE9BA,QAAA,UAEAA,QAAA,SAAmB,KAfnBqC,GAsBAjD,EAAAvB,UAAAkI,OAAA,SAAA1D,GACA,IAAA/F,KAAAoC,QAAAqH,OAAA,MAAA1D,EAMA,KALA,GAGAiE,GAHApE,EAAA,GACAtF,EAAAyF,EAAAZ,OACA9E,EAAA,EAGQA,EAAAC,EAAOD,IACf2J,EAAAjE,EAAA4C,WAAAtI,GACA4J,KAAAC,SAAA,KACAF,EAAA,IAAAA,EAAAG,SAAA,KAEAvE,GAAA,KAAAoE,EAAA,GAGA,OAAApE,IAWA3C,EAAA1B,UAAA0E,KAAA,SAAAA,EAAAD,EAAAE,GACA,GAAAlG,KAAAoC,QAAAmD,UAAA,CACA,GAAAK,GAAA5F,KAAAoC,QAAAmD,UAAAU,EAAAD,EACA,OAAAJ,OAAAK,IACAC,GAAA,EACAD,EAAAL,GAIA,MAAAI,GAMA,qBACAhG,KAAAoC,QAAAgI,WACA7G,EAAAyC,GAAA,GACA,MACAE,EAAAD,EAAA1C,EAAA0C,GAAA,IACA,oBAVA,eACAC,EAAAD,EAAA1C,EAAA0C,GAAA,IACA,mBAWAhD,EAAA1B,UAAAoF,WAAA,SAAA0D,GACA,uBAAAA,EAAA,mBAGApH,EAAA1B,UAAAiC,KAAA,SAAAA,GACA,MAAAA,IAGAP,EAAA1B,UAAAiF,QAAA,SAAAT,EAAAuE,EAAAC,GACA,WACAD,EACA,QACAtK,KAAAoC,QAAAoI,aACAD,EAAA1G,cAAAH,QAAA,eACA,KACAqC,EACA,MACAuE,EACA,OAGArH,EAAA1B,UAAAgF,GAAA,WACA,MAAAvG,MAAAoC,QAAAqI,MAAA,oBAGAxH,EAAA1B,UAAAqF,KAAA,SAAA8D,EAAAxC,GACA,GAAApC,GAAAoC,EAAA,SACA,WAAApC,EAAA,MAAA4E,EAAA,KAAA5E,EAAA,OAGA7C,EAAA1B,UAAAoJ,SAAA,SAAA5E,GACA,aAAAA,EAAA,WAGA9C,EAAA1B,UAAAwF,UAAA,SAAAhB,GACA,YAAAA,EAAA,UAGA9C,EAAA1B,UAAAuF,MAAA,SAAAgB,EAAA4C,GACA,2BAEA5C,EACA,sBAEA4C,EACA,wBAIAzH,EAAA1B,UAAAqJ,SAAA,SAAAC,GACA,eAAAA,EAAA,WAGA5H,EAAA1B,UAAAuJ,UAAA,SAAAD,EAAAE,GACA,GAAAjF,GAAAiF,EAAAjD,OAAA,SAIA,QAHAiD,EAAA/C,MACA,IAAAlC,EAAA,sBAAAiF,EAAA/C,MAAA,KACA,IAAAlC,EAAA,KACA+E,EAAA,KAAA/E,EAAA,OAIA7C,EAAA1B,UAAA2H,OAAA,SAAAnD,GACA,iBAAAA,EAAA,aAGA9C,EAAA1B,UAAA4H,GAAA,SAAApD,GACA,aAAAA,EAAA,SAGA9C,EAAA1B,UAAAqI,SAAA,SAAA7D,GACA,eAAAA,EAAA,WAGA9C,EAAA1B,UAAA6H,GAAA,WACA,MAAApJ,MAAAoC,QAAAqI,MAAA,gBAGAxH,EAAA1B,UAAA8H,IAAA,SAAAtD,GACA,cAAAA,EAAA,UAGA9C,EAAA1B,UAAAwH,KAAA,SAAArE,EAAAgE,EAAA3C,GACA,GAAA/F,KAAAoC,QAAAmG,SAAA,CACA,IACA,GAAAyC,GAAAC,mBAAAtH,EAAAe,IACAhB,QAAA,cACAG,cACK,MAAA4B,GACL,SAEA,OAAAuF,EAAA5C,QAAA,oBAAA4C,EAAA5C,QAAA,kBAAA4C,EAAA5C,QAAA,SACA,SAGApI,KAAAoC,QAAA8I,UAAAC,qBAAAvG,KAAAF,KACAA,EAAAF,EAAAxE,KAAAoC,QAAA8I,QAAAxG,GAEA,IAAAkB,GAAA,YAAAlB,EAAA,GAKA,OAJAgE,KACA9C,GAAA,WAAA8C,EAAA,KAEA9C,GAAA,IAAAG,EAAA,QAIA9C,EAAA1B,UAAAwI,MAAA,SAAArF,EAAAgE,EAAA3C,GACA/F,KAAAoC,QAAA8I,UAAAC,qBAAAvG,KAAAF,KACAA,EAAAF,EAAAxE,KAAAoC,QAAA8I,QAAAxG,GAEA,IAAAkB,GAAA,aAAAlB,EAAA,UAAAqB,EAAA,GAKA,OAJA2C,KACA9C,GAAA,WAAA8C,EAAA,KAEA9C,GAAA5F,KAAAoC,QAAAqI,MAAA,UAIAxH,EAAA1B,UAAAwE,KAAA,SAAAA,GACA,MAAAA,IAoBA1C,EAAAwC,MAAA,SAAAT,EAAAhD,EAAAY,GAEA,MADA,IAAAK,GAAAjB,EAAAY,GACA6C,MAAAT,IAOA/B,EAAA9B,UAAAsE,MAAA,SAAAT,GACApF,KAAA+C,OAAA,GAAAD,GAAAsC,EAAA9C,MAAAtC,KAAAoC,QAAApC,KAAAgD,UACAhD,KAAAqC,OAAA+C,EAAAgG,SAGA,KADA,GAAAxF,GAAA,GACA5F,KAAAqH,QACAzB,GAAA5F,KAAAqL,KAGA,OAAAzF,IAOAvC,EAAA9B,UAAA8F,KAAA,WACA,MAAArH,MAAAsD,MAAAtD,KAAAqC,OAAAiJ,OAOAjI,EAAA9B,UAAAgK,KAAA,WACA,MAAAvL,MAAAqC,OAAArC,KAAAqC,OAAA8C,OAAA,OAOA9B,EAAA9B,UAAAiK,UAAA,WAGA,IAFA,GAAAd,GAAA1K,KAAAsD,MAAAyC,KAEA,SAAA/F,KAAAuL,OAAAzF,MACA4E,GAAA,KAAA1K,KAAAqH,OAAAtB,IAGA,OAAA/F,MAAA+C,OAAAyG,OAAAkB,IAOArH,EAAA9B,UAAA8J,IAAA,WACA,OAAArL,KAAAsD,MAAAwC,MACA,YACA,QAEA,UACA,MAAA9F,MAAAgD,SAAAuD,IAEA,eACA,MAAAvG,MAAAgD,SAAAwD,QACAxG,KAAA+C,OAAAyG,OAAAxJ,KAAAsD,MAAAyC,MACA/F,KAAAsD,MAAAuE,MACA7H,KAAAsD,MAAAyC,KAEA,YACA,MAAA/F,MAAAgD,SAAAiD,KAAAjG,KAAAsD,MAAAyC,KACA/F,KAAAsD,MAAA0C,KACAhG,KAAAsD,MAAA4C,QAEA,aACA,GAEA7F,GACAoL,EACAC,EAEAC,EANA7D,EAAA,GACA4C,EAAA,EASA,KADAgB,EAAA,GACArL,EAAA,EAAiBA,EAAAL,KAAAsD,MAAAwE,OAAA3C,OAA8B9E,MAC9ByH,QAAA,EAAAE,MAAAhI,KAAAsD,MAAA0E,MAAA3H,KACjBqL,GAAA1L,KAAAgD,SAAA8H,UACA9K,KAAA+C,OAAAyG,OAAAxJ,KAAAsD,MAAAwE,OAAAzH,KACWyH,QAAA,EAAAE,MAAAhI,KAAAsD,MAAA0E,MAAA3H,IAKX,KAFAyH,GAAA9H,KAAAgD,SAAA4H,SAAAc,GAEArL,EAAA,EAAiBA,EAAAL,KAAAsD,MAAA2E,MAAA9C,OAA6B9E,IAAA,CAI9C,IAHAoL,EAAAzL,KAAAsD,MAAA2E,MAAA5H,GAEAqL,EAAA,GACAC,EAAA,EAAmBA,EAAAF,EAAAtG,OAAgBwG,IACnCD,GAAA1L,KAAAgD,SAAA8H,UACA9K,KAAA+C,OAAAyG,OAAAiC,EAAAE,KACa7D,QAAA,EAAAE,MAAAhI,KAAAsD,MAAA0E,MAAA2D,IAIbjB,IAAA1K,KAAAgD,SAAA4H,SAAAc,GAEA,MAAA1L,MAAAgD,SAAA8D,MAAAgB,EAAA4C,EAEA,wBAGA,IAFA,GAAAA,GAAA,GAEA,mBAAA1K,KAAAqH,OAAAvB,MACA4E,GAAA1K,KAAAqL,KAGA,OAAArL,MAAAgD,SAAA2D,WAAA+D,EAEA,kBAIA,IAHA,GAAAA,GAAA,GACAxC,EAAAlI,KAAAsD,MAAA4E,QAEA,aAAAlI,KAAAqH,OAAAvB,MACA4E,GAAA1K,KAAAqL,KAGA,OAAArL,MAAAgD,SAAA4D,KAAA8D,EAAAxC,EAEA,uBAGA,IAFA,GAAAwC,GAAA,GAEA,kBAAA1K,KAAAqH,OAAAvB,MACA4E,GAAA,SAAA1K,KAAAsD,MAAAwC,KACA9F,KAAAwL,YACAxL,KAAAqL,KAGA,OAAArL,MAAAgD,SAAA2H,SAAAD,EAEA,wBAGA,IAFA,GAAAA,GAAA,GAEA,kBAAA1K,KAAAqH,OAAAvB,MACA4E,GAAA1K,KAAAqL,KAGA,OAAArL,MAAAgD,SAAA2H,SAAAD,EAEA,YACA,GAAAlH,GAAAxD,KAAAsD,MAAAkF,KAAAxI,KAAAoC,QAAAgB,SAEApD,KAAAsD,MAAAyC,KADA/F,KAAA+C,OAAAyG,OAAAxJ,KAAAsD,MAAAyC,KAEA,OAAA/F,MAAAgD,SAAAQ,OAEA,iBACA,MAAAxD,MAAAgD,SAAA+D,UAAA/G,KAAA+C,OAAAyG,OAAAxJ,KAAAsD,MAAAyC,MAEA,YACA,MAAA/F,MAAAgD,SAAA+D,UAAA/G,KAAAwL,eAiEA7G,YACAwG,qBAAA,gCAGArG,EAAA6C,KAAA7C,EAgHAvC,EAAAH,QACAG,EAAAqJ,WAAA,SAAAxH,GAEA,MADAW,GAAAxC,EAAAC,SAAA4B,GACA7B,GAGAA,EAAAC,UACAI,KAAA,EACAC,QAAA,EACAM,QAAA,EACAC,UAAA,EACAmF,UAAA,EACAE,UAAA,KACAgB,QAAA,EACApB,YAAA,EACAjC,QAAA,EACAb,UAAA,KACA6E,WAAA,QACAN,aAAA,EACAU,aAAA,GACAxH,SAAA,GAAAC,GACAwH,OAAA,EACAS,QAAA,MAOA3I,EAAAc,SACAd,EAAAsJ,OAAAxI,EAAAwC,MAEAtD,EAAAU,WAEAV,EAAAJ,QACAI,EAAAuJ,MAAA3J,EAAAqD,IAEAjD,EAAAO,cACAP,EAAAwJ,YAAAjJ,EAAA0G,OAEAjH,EAAAsD,MAAAtD,EAGA3C,EAAAD,QAAA4C,IAOChC,KAAA,WACD,MAAAP,QAAA,mBAAAgM,eAAA9J,SHyG6B3B,KAAKZ,EAASO,EAAoB,KAIzD,SAAUN,EAAQD,GI94CxB,GAAAsM,EAGAA,GAAA,WACA,MAAAjM,QAGA,KAEAiM,KAAAC,SAAA,qBAAAC,MAAA,QACC,MAAA1G,GAED,gBAAAuG,UACAC,EAAAD,QAOApM,EAAAD,QAAAsM","file":"@aexo/marki.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@aexo/marki\"] = factory();\n\telse\n\t\troot[\"@aexo/marki\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@aexo/marki\"] = factory();\n\telse\n\t\troot[\"@aexo/marki\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _marked = __webpack_require__(1);\n\nvar _marked2 = _interopRequireDefault(_marked);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar marki = _marked2.default;\n\nmarki.loadConfig = function () {};\n\nexports.default = marki;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {/**\n * marked - a markdown parser\n * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/chjj/marked\n */\n\n;(function() {\n\n/**\n * Block-Level Grammar\n */\n\nvar block = {\n  newline: /^\\n+/,\n  code: /^( {4}[^\\n]+\\n*)+/,\n  fences: noop,\n  hr: /^( *[-*_]){3,} *(?:\\n+|$)/,\n  heading: /^ *(#{1,6}) *([^\\n]+?) *#* *(?:\\n+|$)/,\n  nptable: noop,\n  lheading: /^([^\\n]+)\\n *(=|-){2,} *(?:\\n+|$)/,\n  blockquote: /^( *>[^\\n]+(\\n(?!def)[^\\n]+)*\\n*)+/,\n  list: /^( *)(bull) [\\s\\S]+?(?:hr|def|\\n{2,}(?! )(?!\\1bull )\\n*|\\s*$)/,\n  html: /^ *(?:comment *(?:\\n|\\s*$)|closed *(?:\\n{2,}|\\s*$)|closing *(?:\\n{2,}|\\s*$))/,\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +[\"(]([^\\n]+)[\")])? *(?:\\n+|$)/,\n  table: noop,\n  paragraph: /^((?:[^\\n]+\\n?(?!hr|heading|lheading|blockquote|tag|def))+)\\n*/,\n  text: /^[^\\n]+/\n};\n\nblock.bullet = /(?:[*+-]|\\d+\\.)/;\nblock.item = /^( *)(bull) [^\\n]*(?:\\n(?!\\1bull )[^\\n]*)*/;\nblock.item = replace(block.item, 'gm')\n  (/bull/g, block.bullet)\n  ();\n\nblock.list = replace(block.list)\n  (/bull/g, block.bullet)\n  ('hr', '\\\\n+(?=\\\\1?(?:[-*_] *){3,}(?:\\\\n+|$))')\n  ('def', '\\\\n+(?=' + block.def.source + ')')\n  ();\n\nblock._tag = '(?!(?:'\n  + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code'\n  + '|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo'\n  + '|span|br|wbr|ins|del|img)\\\\b)\\\\w+(?!:/|[^\\\\w\\\\s@]*@)\\\\b';\n\nblock.html = replace(block.html)\n  ('comment', /<!--[\\s\\S]*?-->/)\n  ('closed', /<(tag)[\\s\\S]+?<\\/\\1>/)\n  ('closing', /<tag(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>/)\n  (/tag/g, block._tag)\n  ();\n\nblock.paragraph = replace(block.paragraph)\n  ('hr', block.hr)\n  ('heading', block.heading)\n  ('lheading', block.lheading)\n  ('blockquote', block.blockquote)\n  ('tag', '<' + block._tag)\n  ('def', block.def)\n  ();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = merge({}, block);\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = merge({}, block.normal, {\n  fences: /^ *(`{3,}|~{3,})[ \\.]*(\\S+)? *\\n([\\s\\S]*?)\\s*\\1 *(?:\\n+|$)/,\n  paragraph: /^/,\n  heading: /^ *(#{1,6}) +([^\\n]+?) *#* *(?:\\n+|$)/\n});\n\nblock.gfm.paragraph = replace(block.paragraph)\n  ('(?!', '(?!'\n    + block.gfm.fences.source.replace('\\\\1', '\\\\2') + '|'\n    + block.list.source.replace('\\\\1', '\\\\3') + '|')\n  ();\n\n/**\n * GFM + Tables Block Grammar\n */\n\nblock.tables = merge({}, block.gfm, {\n  nptable: /^ *(\\S.*\\|.*)\\n *([-:]+ *\\|[-| :]*)\\n((?:.*\\|.*(?:\\n|$))*)\\n*/,\n  table: /^ *\\|(.+)\\n *\\|( *[-:]+[-| :]*)\\n((?: *\\|.*(?:\\n|$))*)\\n*/\n});\n\n/**\n * Block Lexer\n */\n\nfunction Lexer(options) {\n  this.tokens = [];\n  this.tokens.links = {};\n  this.options = options || marked.defaults;\n  this.rules = block.normal;\n\n  if (this.options.gfm) {\n    if (this.options.tables) {\n      this.rules = block.tables;\n    } else {\n      this.rules = block.gfm;\n    }\n  }\n}\n\n/**\n * Expose Block Rules\n */\n\nLexer.rules = block;\n\n/**\n * Static Lex Method\n */\n\nLexer.lex = function(src, options) {\n  var lexer = new Lexer(options);\n  return lexer.lex(src);\n};\n\n/**\n * Preprocessing\n */\n\nLexer.prototype.lex = function(src) {\n  src = src\n    .replace(/\\r\\n|\\r/g, '\\n')\n    .replace(/\\t/g, '    ')\n    .replace(/\\u00a0/g, ' ')\n    .replace(/\\u2424/g, '\\n');\n\n  return this.token(src, true);\n};\n\n/**\n * Lexing\n */\n\nLexer.prototype.token = function(src, top, bq) {\n  var src = src.replace(/^ +$/gm, '')\n    , next\n    , loose\n    , cap\n    , bull\n    , b\n    , item\n    , space\n    , i\n    , l;\n\n  while (src) {\n    // newline\n    if (cap = this.rules.newline.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (cap[0].length > 1) {\n        this.tokens.push({\n          type: 'space'\n        });\n      }\n    }\n\n    // code\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      cap = cap[0].replace(/^ {4}/gm, '');\n      this.tokens.push({\n        type: 'code',\n        text: !this.options.pedantic\n          ? cap.replace(/\\n+$/, '')\n          : cap\n      });\n      continue;\n    }\n\n    // fences (gfm)\n    if (cap = this.rules.fences.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'code',\n        lang: cap[2],\n        text: cap[3] || ''\n      });\n      continue;\n    }\n\n    // heading\n    if (cap = this.rules.heading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[1].length,\n        text: cap[2]\n      });\n      continue;\n    }\n\n    // table no leading pipe (gfm)\n    if (top && (cap = this.rules.nptable.exec(src))) {\n      src = src.substring(cap[0].length);\n\n      item = {\n        type: 'table',\n        header: cap[1].replace(/^ *| *\\| *$/g, '').split(/ *\\| */),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        cells: cap[3].replace(/\\n$/, '').split('\\n')\n      };\n\n      for (i = 0; i < item.align.length; i++) {\n        if (/^ *-+: *$/.test(item.align[i])) {\n          item.align[i] = 'right';\n        } else if (/^ *:-+: *$/.test(item.align[i])) {\n          item.align[i] = 'center';\n        } else if (/^ *:-+ *$/.test(item.align[i])) {\n          item.align[i] = 'left';\n        } else {\n          item.align[i] = null;\n        }\n      }\n\n      for (i = 0; i < item.cells.length; i++) {\n        item.cells[i] = item.cells[i].split(/ *\\| */);\n      }\n\n      this.tokens.push(item);\n\n      continue;\n    }\n\n    // lheading\n    if (cap = this.rules.lheading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[2] === '=' ? 1 : 2,\n        text: cap[1]\n      });\n      continue;\n    }\n\n    // hr\n    if (cap = this.rules.hr.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'hr'\n      });\n      continue;\n    }\n\n    // blockquote\n    if (cap = this.rules.blockquote.exec(src)) {\n      src = src.substring(cap[0].length);\n\n      this.tokens.push({\n        type: 'blockquote_start'\n      });\n\n      cap = cap[0].replace(/^ *> ?/gm, '');\n\n      // Pass `top` to keep the current\n      // \"toplevel\" state. This is exactly\n      // how markdown.pl works.\n      this.token(cap, top, true);\n\n      this.tokens.push({\n        type: 'blockquote_end'\n      });\n\n      continue;\n    }\n\n    // list\n    if (cap = this.rules.list.exec(src)) {\n      src = src.substring(cap[0].length);\n      bull = cap[2];\n\n      this.tokens.push({\n        type: 'list_start',\n        ordered: bull.length > 1\n      });\n\n      // Get each top-level item.\n      cap = cap[0].match(this.rules.item);\n\n      next = false;\n      l = cap.length;\n      i = 0;\n\n      for (; i < l; i++) {\n        item = cap[i];\n\n        // Remove the list item's bullet\n        // so it is seen as the next token.\n        space = item.length;\n        item = item.replace(/^ *([*+-]|\\d+\\.) +/, '');\n\n        // Outdent whatever the\n        // list item contains. Hacky.\n        if (~item.indexOf('\\n ')) {\n          space -= item.length;\n          item = !this.options.pedantic\n            ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')\n            : item.replace(/^ {1,4}/gm, '');\n        }\n\n        // Determine whether the next list item belongs here.\n        // Backpedal if it does not belong in this list.\n        if (this.options.smartLists && i !== l - 1) {\n          b = block.bullet.exec(cap[i + 1])[0];\n          if (bull !== b && !(bull.length > 1 && b.length > 1)) {\n            src = cap.slice(i + 1).join('\\n') + src;\n            i = l - 1;\n          }\n        }\n\n        // Determine whether item is loose or not.\n        // Use: /(^|\\n)(?! )[^\\n]+\\n\\n(?!\\s*$)/\n        // for discount behavior.\n        loose = next || /\\n\\n(?!\\s*$)/.test(item);\n        if (i !== l - 1) {\n          next = item.charAt(item.length - 1) === '\\n';\n          if (!loose) loose = next;\n        }\n\n        this.tokens.push({\n          type: loose\n            ? 'loose_item_start'\n            : 'list_item_start'\n        });\n\n        // Recurse.\n        this.token(item, false, bq);\n\n        this.tokens.push({\n          type: 'list_item_end'\n        });\n      }\n\n      this.tokens.push({\n        type: 'list_end'\n      });\n\n      continue;\n    }\n\n    // html\n    if (cap = this.rules.html.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: this.options.sanitize\n          ? 'paragraph'\n          : 'html',\n        pre: !this.options.sanitizer\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      });\n      continue;\n    }\n\n    // def\n    if ((!bq && top) && (cap = this.rules.def.exec(src))) {\n      src = src.substring(cap[0].length);\n      this.tokens.links[cap[1].toLowerCase()] = {\n        href: cap[2],\n        title: cap[3]\n      };\n      continue;\n    }\n\n    // table (gfm)\n    if (top && (cap = this.rules.table.exec(src))) {\n      src = src.substring(cap[0].length);\n\n      item = {\n        type: 'table',\n        header: cap[1].replace(/^ *| *\\| *$/g, '').split(/ *\\| */),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        cells: cap[3].replace(/(?: *\\| *)?\\n$/, '').split('\\n')\n      };\n\n      for (i = 0; i < item.align.length; i++) {\n        if (/^ *-+: *$/.test(item.align[i])) {\n          item.align[i] = 'right';\n        } else if (/^ *:-+: *$/.test(item.align[i])) {\n          item.align[i] = 'center';\n        } else if (/^ *:-+ *$/.test(item.align[i])) {\n          item.align[i] = 'left';\n        } else {\n          item.align[i] = null;\n        }\n      }\n\n      for (i = 0; i < item.cells.length; i++) {\n        item.cells[i] = item.cells[i]\n          .replace(/^ *\\| *| *\\| *$/g, '')\n          .split(/ *\\| */);\n      }\n\n      this.tokens.push(item);\n\n      continue;\n    }\n\n    // top-level paragraph\n    if (top && (cap = this.rules.paragraph.exec(src))) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'paragraph',\n        text: cap[1].charAt(cap[1].length - 1) === '\\n'\n          ? cap[1].slice(0, -1)\n          : cap[1]\n      });\n      continue;\n    }\n\n    // text\n    if (cap = this.rules.text.exec(src)) {\n      // Top-level should never reach here.\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'text',\n        text: cap[0]\n      });\n      continue;\n    }\n\n    if (src) {\n      throw new\n        Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return this.tokens;\n};\n\n/**\n * Inline-Level Grammar\n */\n\nvar inline = {\n  escape: /^\\\\([\\\\`*{}\\[\\]()#+\\-.!_>])/,\n  autolink: /^<([^ >]+(@|:\\/)[^ >]+)>/,\n  url: noop,\n  tag: /^<!--[\\s\\S]*?-->|^<\\/?\\w+(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>/,\n  link: /^!?\\[(inside)\\]\\(href\\)/,\n  reflink: /^!?\\[(inside)\\]\\s*\\[([^\\]]*)\\]/,\n  nolink: /^!?\\[((?:\\[[^\\]]*\\]|[^\\[\\]])*)\\]/,\n  strong: /^__([\\s\\S]+?)__(?!_)|^\\*\\*([\\s\\S]+?)\\*\\*(?!\\*)/,\n  em: /^\\b_((?:[^_]|__)+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,\n  code: /^(`+)([\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^ {2,}\\n(?!\\s*$)/,\n  del: noop,\n  text: /^[\\s\\S]+?(?=[\\\\<!\\[_*`]| {2,}\\n|$)/\n};\n\ninline._inside = /(?:\\[[^\\]]*\\]|[^\\[\\]]|\\](?=[^\\[]*\\]))*/;\ninline._href = /\\s*<?([\\s\\S]*?)>?(?:\\s+['\"]([\\s\\S]*?)['\"])?\\s*/;\n\ninline.link = replace(inline.link)\n  ('inside', inline._inside)\n  ('href', inline._href)\n  ();\n\ninline.reflink = replace(inline.reflink)\n  ('inside', inline._inside)\n  ();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = merge({}, inline);\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = merge({}, inline.normal, {\n  strong: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n  em: /^_(?=\\S)([\\s\\S]*?\\S)_(?!_)|^\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)/\n});\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = merge({}, inline.normal, {\n  escape: replace(inline.escape)('])', '~|])')(),\n  url: /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/,\n  del: /^~~(?=\\S)([\\s\\S]*?\\S)~~/,\n  text: replace(inline.text)\n    (']|', '~]|')\n    ('|', '|https?://|')\n    ()\n});\n\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = merge({}, inline.gfm, {\n  br: replace(inline.br)('{2,}', '*')(),\n  text: replace(inline.gfm.text)('{2,}', '*')()\n});\n\n/**\n * Inline Lexer & Compiler\n */\n\nfunction InlineLexer(links, options) {\n  this.options = options || marked.defaults;\n  this.links = links;\n  this.rules = inline.normal;\n  this.renderer = this.options.renderer || new Renderer;\n  this.renderer.options = this.options;\n\n  if (!this.links) {\n    throw new\n      Error('Tokens array requires a `links` property.');\n  }\n\n  if (this.options.gfm) {\n    if (this.options.breaks) {\n      this.rules = inline.breaks;\n    } else {\n      this.rules = inline.gfm;\n    }\n  } else if (this.options.pedantic) {\n    this.rules = inline.pedantic;\n  }\n}\n\n/**\n * Expose Inline Rules\n */\n\nInlineLexer.rules = inline;\n\n/**\n * Static Lexing/Compiling Method\n */\n\nInlineLexer.output = function(src, links, options) {\n  var inline = new InlineLexer(links, options);\n  return inline.output(src);\n};\n\n/**\n * Lexing/Compiling\n */\n\nInlineLexer.prototype.output = function(src) {\n  var out = ''\n    , link\n    , text\n    , href\n    , cap;\n\n  while (src) {\n    // escape\n    if (cap = this.rules.escape.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += cap[1];\n      continue;\n    }\n\n    // autolink\n    if (cap = this.rules.autolink.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (cap[2] === '@') {\n        text = escape(\n          cap[1].charAt(6) === ':'\n          ? this.mangle(cap[1].substring(7))\n          : this.mangle(cap[1])\n        );\n        href = this.mangle('mailto:') + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n      out += this.renderer.link(href, null, text);\n      continue;\n    }\n\n    // url (gfm)\n    if (!this.inLink && (cap = this.rules.url.exec(src))) {\n      src = src.substring(cap[0].length);\n      text = escape(cap[1]);\n      href = text;\n      out += this.renderer.link(href, null, text);\n      continue;\n    }\n\n    // tag\n    if (cap = this.rules.tag.exec(src)) {\n      if (!this.inLink && /^<a /i.test(cap[0])) {\n        this.inLink = true;\n      } else if (this.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.inLink = false;\n      }\n      src = src.substring(cap[0].length);\n      out += this.options.sanitize\n        ? this.options.sanitizer\n          ? this.options.sanitizer(cap[0])\n          : escape(cap[0])\n        : cap[0]\n      continue;\n    }\n\n    // link\n    if (cap = this.rules.link.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.inLink = true;\n      out += this.outputLink(cap, {\n        href: cap[2],\n        title: cap[3]\n      });\n      this.inLink = false;\n      continue;\n    }\n\n    // reflink, nolink\n    if ((cap = this.rules.reflink.exec(src))\n        || (cap = this.rules.nolink.exec(src))) {\n      src = src.substring(cap[0].length);\n      link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = this.links[link.toLowerCase()];\n      if (!link || !link.href) {\n        out += cap[0].charAt(0);\n        src = cap[0].substring(1) + src;\n        continue;\n      }\n      this.inLink = true;\n      out += this.outputLink(cap, link);\n      this.inLink = false;\n      continue;\n    }\n\n    // strong\n    if (cap = this.rules.strong.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.strong(this.output(cap[2] || cap[1]));\n      continue;\n    }\n\n    // em\n    if (cap = this.rules.em.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.em(this.output(cap[2] || cap[1]));\n      continue;\n    }\n\n    // code\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.codespan(escape(cap[2].trim(), true));\n      continue;\n    }\n\n    // br\n    if (cap = this.rules.br.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.br();\n      continue;\n    }\n\n    // del (gfm)\n    if (cap = this.rules.del.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.del(this.output(cap[1]));\n      continue;\n    }\n\n    // text\n    if (cap = this.rules.text.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.text(escape(this.smartypants(cap[0])));\n      continue;\n    }\n\n    if (src) {\n      throw new\n        Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return out;\n};\n\n/**\n * Compile Link\n */\n\nInlineLexer.prototype.outputLink = function(cap, link) {\n  var href = escape(link.href)\n    , title = link.title ? escape(link.title) : null;\n\n  return cap[0].charAt(0) !== '!'\n    ? this.renderer.link(href, title, this.output(cap[1]))\n    : this.renderer.image(href, title, escape(cap[1]));\n};\n\n/**\n * Smartypants Transformations\n */\n\nInlineLexer.prototype.smartypants = function(text) {\n  if (!this.options.smartypants) return text;\n  return text\n    // em-dashes\n    .replace(/---/g, '\\u2014')\n    // en-dashes\n    .replace(/--/g, '\\u2013')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n};\n\n/**\n * Mangle Links\n */\n\nInlineLexer.prototype.mangle = function(text) {\n  if (!this.options.mangle) return text;\n  var out = ''\n    , l = text.length\n    , i = 0\n    , ch;\n\n  for (; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n};\n\n/**\n * Renderer\n */\n\nfunction Renderer(options) {\n  this.options = options || {};\n}\n\nRenderer.prototype.code = function(code, lang, escaped) {\n  if (this.options.highlight) {\n    var out = this.options.highlight(code, lang);\n    if (out != null && out !== code) {\n      escaped = true;\n      code = out;\n    }\n  }\n\n  if (!lang) {\n    return '<pre><code>'\n      + (escaped ? code : escape(code, true))\n      + '\\n</code></pre>';\n  }\n\n  return '<pre><code class=\"'\n    + this.options.langPrefix\n    + escape(lang, true)\n    + '\">'\n    + (escaped ? code : escape(code, true))\n    + '\\n</code></pre>\\n';\n};\n\nRenderer.prototype.blockquote = function(quote) {\n  return '<blockquote>\\n' + quote + '</blockquote>\\n';\n};\n\nRenderer.prototype.html = function(html) {\n  return html;\n};\n\nRenderer.prototype.heading = function(text, level, raw) {\n  return '<h'\n    + level\n    + ' id=\"'\n    + this.options.headerPrefix\n    + raw.toLowerCase().replace(/[^\\w]+/g, '-')\n    + '\">'\n    + text\n    + '</h'\n    + level\n    + '>\\n';\n};\n\nRenderer.prototype.hr = function() {\n  return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n};\n\nRenderer.prototype.list = function(body, ordered) {\n  var type = ordered ? 'ol' : 'ul';\n  return '<' + type + '>\\n' + body + '</' + type + '>\\n';\n};\n\nRenderer.prototype.listitem = function(text) {\n  return '<li>' + text + '</li>\\n';\n};\n\nRenderer.prototype.paragraph = function(text) {\n  return '<p>' + text + '</p>\\n';\n};\n\nRenderer.prototype.table = function(header, body) {\n  return '<table>\\n'\n    + '<thead>\\n'\n    + header\n    + '</thead>\\n'\n    + '<tbody>\\n'\n    + body\n    + '</tbody>\\n'\n    + '</table>\\n';\n};\n\nRenderer.prototype.tablerow = function(content) {\n  return '<tr>\\n' + content + '</tr>\\n';\n};\n\nRenderer.prototype.tablecell = function(content, flags) {\n  var type = flags.header ? 'th' : 'td';\n  var tag = flags.align\n    ? '<' + type + ' style=\"text-align:' + flags.align + '\">'\n    : '<' + type + '>';\n  return tag + content + '</' + type + '>\\n';\n};\n\n// span level renderer\nRenderer.prototype.strong = function(text) {\n  return '<strong>' + text + '</strong>';\n};\n\nRenderer.prototype.em = function(text) {\n  return '<em>' + text + '</em>';\n};\n\nRenderer.prototype.codespan = function(text) {\n  return '<code>' + text + '</code>';\n};\n\nRenderer.prototype.br = function() {\n  return this.options.xhtml ? '<br/>' : '<br>';\n};\n\nRenderer.prototype.del = function(text) {\n  return '<del>' + text + '</del>';\n};\n\nRenderer.prototype.link = function(href, title, text) {\n  if (this.options.sanitize) {\n    try {\n      var prot = decodeURIComponent(unescape(href))\n        .replace(/[^\\w:]/g, '')\n        .toLowerCase();\n    } catch (e) {\n      return '';\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return '';\n    }\n  }\n  if (this.options.baseUrl && !originIndependentUrl.test(href)) {\n    href = resolveUrl(this.options.baseUrl, href);\n  }\n  var out = '<a href=\"' + href + '\"';\n  if (title) {\n    out += ' title=\"' + title + '\"';\n  }\n  out += '>' + text + '</a>';\n  return out;\n};\n\nRenderer.prototype.image = function(href, title, text) {\n  if (this.options.baseUrl && !originIndependentUrl.test(href)) {\n    href = resolveUrl(this.options.baseUrl, href);\n  }\n  var out = '<img src=\"' + href + '\" alt=\"' + text + '\"';\n  if (title) {\n    out += ' title=\"' + title + '\"';\n  }\n  out += this.options.xhtml ? '/>' : '>';\n  return out;\n};\n\nRenderer.prototype.text = function(text) {\n  return text;\n};\n\n/**\n * Parsing & Compiling\n */\n\nfunction Parser(options) {\n  this.tokens = [];\n  this.token = null;\n  this.options = options || marked.defaults;\n  this.options.renderer = this.options.renderer || new Renderer;\n  this.renderer = this.options.renderer;\n  this.renderer.options = this.options;\n}\n\n/**\n * Static Parse Method\n */\n\nParser.parse = function(src, options, renderer) {\n  var parser = new Parser(options, renderer);\n  return parser.parse(src);\n};\n\n/**\n * Parse Loop\n */\n\nParser.prototype.parse = function(src) {\n  this.inline = new InlineLexer(src.links, this.options, this.renderer);\n  this.tokens = src.reverse();\n\n  var out = '';\n  while (this.next()) {\n    out += this.tok();\n  }\n\n  return out;\n};\n\n/**\n * Next Token\n */\n\nParser.prototype.next = function() {\n  return this.token = this.tokens.pop();\n};\n\n/**\n * Preview Next Token\n */\n\nParser.prototype.peek = function() {\n  return this.tokens[this.tokens.length - 1] || 0;\n};\n\n/**\n * Parse Text Tokens\n */\n\nParser.prototype.parseText = function() {\n  var body = this.token.text;\n\n  while (this.peek().type === 'text') {\n    body += '\\n' + this.next().text;\n  }\n\n  return this.inline.output(body);\n};\n\n/**\n * Parse Current Token\n */\n\nParser.prototype.tok = function() {\n  switch (this.token.type) {\n    case 'space': {\n      return '';\n    }\n    case 'hr': {\n      return this.renderer.hr();\n    }\n    case 'heading': {\n      return this.renderer.heading(\n        this.inline.output(this.token.text),\n        this.token.depth,\n        this.token.text);\n    }\n    case 'code': {\n      return this.renderer.code(this.token.text,\n        this.token.lang,\n        this.token.escaped);\n    }\n    case 'table': {\n      var header = ''\n        , body = ''\n        , i\n        , row\n        , cell\n        , flags\n        , j;\n\n      // header\n      cell = '';\n      for (i = 0; i < this.token.header.length; i++) {\n        flags = { header: true, align: this.token.align[i] };\n        cell += this.renderer.tablecell(\n          this.inline.output(this.token.header[i]),\n          { header: true, align: this.token.align[i] }\n        );\n      }\n      header += this.renderer.tablerow(cell);\n\n      for (i = 0; i < this.token.cells.length; i++) {\n        row = this.token.cells[i];\n\n        cell = '';\n        for (j = 0; j < row.length; j++) {\n          cell += this.renderer.tablecell(\n            this.inline.output(row[j]),\n            { header: false, align: this.token.align[j] }\n          );\n        }\n\n        body += this.renderer.tablerow(cell);\n      }\n      return this.renderer.table(header, body);\n    }\n    case 'blockquote_start': {\n      var body = '';\n\n      while (this.next().type !== 'blockquote_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.blockquote(body);\n    }\n    case 'list_start': {\n      var body = ''\n        , ordered = this.token.ordered;\n\n      while (this.next().type !== 'list_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.list(body, ordered);\n    }\n    case 'list_item_start': {\n      var body = '';\n\n      while (this.next().type !== 'list_item_end') {\n        body += this.token.type === 'text'\n          ? this.parseText()\n          : this.tok();\n      }\n\n      return this.renderer.listitem(body);\n    }\n    case 'loose_item_start': {\n      var body = '';\n\n      while (this.next().type !== 'list_item_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.listitem(body);\n    }\n    case 'html': {\n      var html = !this.token.pre && !this.options.pedantic\n        ? this.inline.output(this.token.text)\n        : this.token.text;\n      return this.renderer.html(html);\n    }\n    case 'paragraph': {\n      return this.renderer.paragraph(this.inline.output(this.token.text));\n    }\n    case 'text': {\n      return this.renderer.paragraph(this.parseText());\n    }\n  }\n};\n\n/**\n * Helpers\n */\n\nfunction escape(html, encode) {\n  return html\n    .replace(!encode ? /&(?!#?\\w+;)/g : /&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#39;');\n}\n\nfunction unescape(html) {\n\t// explicitly match decimal, hex, and named HTML entities\n  return html.replace(/&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig, function(_, n) {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nfunction replace(regex, opt) {\n  regex = regex.source;\n  opt = opt || '';\n  return function self(name, val) {\n    if (!name) return new RegExp(regex, opt);\n    val = val.source || val;\n    val = val.replace(/(^|[^\\[])\\^/g, '$1');\n    regex = regex.replace(name, val);\n    return self;\n  };\n}\n\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (/^[^:]+:\\/*[^/]*$/.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = base.replace(/[^/]*$/, '');\n    }\n  }\n  base = baseUrls[' ' + base];\n\n  if (href.slice(0, 2) === '//') {\n    return base.replace(/:[^]*/, ':') + href;\n  } else if (href.charAt(0) === '/') {\n    return base.replace(/(:\\/*[^/]*)[^]*/, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\nbaseUrls = {};\noriginIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n\nfunction noop() {}\nnoop.exec = noop;\n\nfunction merge(obj) {\n  var i = 1\n    , target\n    , key;\n\n  for (; i < arguments.length; i++) {\n    target = arguments[i];\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n\n  return obj;\n}\n\n\n/**\n * Marked\n */\n\nfunction marked(src, opt, callback) {\n  if (callback || typeof opt === 'function') {\n    if (!callback) {\n      callback = opt;\n      opt = null;\n    }\n\n    opt = merge({}, marked.defaults, opt || {});\n\n    var highlight = opt.highlight\n      , tokens\n      , pending\n      , i = 0;\n\n    try {\n      tokens = Lexer.lex(src, opt)\n    } catch (e) {\n      return callback(e);\n    }\n\n    pending = tokens.length;\n\n    var done = function(err) {\n      if (err) {\n        opt.highlight = highlight;\n        return callback(err);\n      }\n\n      var out;\n\n      try {\n        out = Parser.parse(tokens, opt);\n      } catch (e) {\n        err = e;\n      }\n\n      opt.highlight = highlight;\n\n      return err\n        ? callback(err)\n        : callback(null, out);\n    };\n\n    if (!highlight || highlight.length < 3) {\n      return done();\n    }\n\n    delete opt.highlight;\n\n    if (!pending) return done();\n\n    for (; i < tokens.length; i++) {\n      (function(token) {\n        if (token.type !== 'code') {\n          return --pending || done();\n        }\n        return highlight(token.text, token.lang, function(err, code) {\n          if (err) return done(err);\n          if (code == null || code === token.text) {\n            return --pending || done();\n          }\n          token.text = code;\n          token.escaped = true;\n          --pending || done();\n        });\n      })(tokens[i]);\n    }\n\n    return;\n  }\n  try {\n    if (opt) opt = merge({}, marked.defaults, opt);\n    return Parser.parse(Lexer.lex(src, opt), opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/chjj/marked.';\n    if ((opt || marked.defaults).silent) {\n      return '<p>An error occured:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n}\n\n/**\n * Options\n */\n\nmarked.options =\nmarked.setOptions = function(opt) {\n  merge(marked.defaults, opt);\n  return marked;\n};\n\nmarked.defaults = {\n  gfm: true,\n  tables: true,\n  breaks: false,\n  pedantic: false,\n  sanitize: false,\n  sanitizer: null,\n  mangle: true,\n  smartLists: false,\n  silent: false,\n  highlight: null,\n  langPrefix: 'lang-',\n  smartypants: false,\n  headerPrefix: '',\n  renderer: new Renderer,\n  xhtml: false,\n  baseUrl: null\n};\n\n/**\n * Expose\n */\n\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\n\nmarked.Renderer = Renderer;\n\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\n\nmarked.InlineLexer = InlineLexer;\nmarked.inlineLexer = InlineLexer.output;\n\nmarked.parse = marked;\n\nif (true) {\n  module.exports = marked;\n} else if (typeof define === 'function' && define.amd) {\n  define(function() { return marked; });\n} else {\n  this.marked = marked;\n}\n\n}).call(function() {\n  return this || (typeof window !== 'undefined' ? window : global);\n}());\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\nvar g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// @aexo/marki.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 4f83ef435c157ec6418a","import marked from 'marked';\n\nlet marki = marked;\n\nmarki.loadConfig = function() {\n\n};\n\nexport default marki;\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.js","/**\n * marked - a markdown parser\n * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/chjj/marked\n */\n\n;(function() {\n\n/**\n * Block-Level Grammar\n */\n\nvar block = {\n  newline: /^\\n+/,\n  code: /^( {4}[^\\n]+\\n*)+/,\n  fences: noop,\n  hr: /^( *[-*_]){3,} *(?:\\n+|$)/,\n  heading: /^ *(#{1,6}) *([^\\n]+?) *#* *(?:\\n+|$)/,\n  nptable: noop,\n  lheading: /^([^\\n]+)\\n *(=|-){2,} *(?:\\n+|$)/,\n  blockquote: /^( *>[^\\n]+(\\n(?!def)[^\\n]+)*\\n*)+/,\n  list: /^( *)(bull) [\\s\\S]+?(?:hr|def|\\n{2,}(?! )(?!\\1bull )\\n*|\\s*$)/,\n  html: /^ *(?:comment *(?:\\n|\\s*$)|closed *(?:\\n{2,}|\\s*$)|closing *(?:\\n{2,}|\\s*$))/,\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +[\"(]([^\\n]+)[\")])? *(?:\\n+|$)/,\n  table: noop,\n  paragraph: /^((?:[^\\n]+\\n?(?!hr|heading|lheading|blockquote|tag|def))+)\\n*/,\n  text: /^[^\\n]+/\n};\n\nblock.bullet = /(?:[*+-]|\\d+\\.)/;\nblock.item = /^( *)(bull) [^\\n]*(?:\\n(?!\\1bull )[^\\n]*)*/;\nblock.item = replace(block.item, 'gm')\n  (/bull/g, block.bullet)\n  ();\n\nblock.list = replace(block.list)\n  (/bull/g, block.bullet)\n  ('hr', '\\\\n+(?=\\\\1?(?:[-*_] *){3,}(?:\\\\n+|$))')\n  ('def', '\\\\n+(?=' + block.def.source + ')')\n  ();\n\nblock._tag = '(?!(?:'\n  + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code'\n  + '|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo'\n  + '|span|br|wbr|ins|del|img)\\\\b)\\\\w+(?!:/|[^\\\\w\\\\s@]*@)\\\\b';\n\nblock.html = replace(block.html)\n  ('comment', /<!--[\\s\\S]*?-->/)\n  ('closed', /<(tag)[\\s\\S]+?<\\/\\1>/)\n  ('closing', /<tag(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>/)\n  (/tag/g, block._tag)\n  ();\n\nblock.paragraph = replace(block.paragraph)\n  ('hr', block.hr)\n  ('heading', block.heading)\n  ('lheading', block.lheading)\n  ('blockquote', block.blockquote)\n  ('tag', '<' + block._tag)\n  ('def', block.def)\n  ();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = merge({}, block);\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = merge({}, block.normal, {\n  fences: /^ *(`{3,}|~{3,})[ \\.]*(\\S+)? *\\n([\\s\\S]*?)\\s*\\1 *(?:\\n+|$)/,\n  paragraph: /^/,\n  heading: /^ *(#{1,6}) +([^\\n]+?) *#* *(?:\\n+|$)/\n});\n\nblock.gfm.paragraph = replace(block.paragraph)\n  ('(?!', '(?!'\n    + block.gfm.fences.source.replace('\\\\1', '\\\\2') + '|'\n    + block.list.source.replace('\\\\1', '\\\\3') + '|')\n  ();\n\n/**\n * GFM + Tables Block Grammar\n */\n\nblock.tables = merge({}, block.gfm, {\n  nptable: /^ *(\\S.*\\|.*)\\n *([-:]+ *\\|[-| :]*)\\n((?:.*\\|.*(?:\\n|$))*)\\n*/,\n  table: /^ *\\|(.+)\\n *\\|( *[-:]+[-| :]*)\\n((?: *\\|.*(?:\\n|$))*)\\n*/\n});\n\n/**\n * Block Lexer\n */\n\nfunction Lexer(options) {\n  this.tokens = [];\n  this.tokens.links = {};\n  this.options = options || marked.defaults;\n  this.rules = block.normal;\n\n  if (this.options.gfm) {\n    if (this.options.tables) {\n      this.rules = block.tables;\n    } else {\n      this.rules = block.gfm;\n    }\n  }\n}\n\n/**\n * Expose Block Rules\n */\n\nLexer.rules = block;\n\n/**\n * Static Lex Method\n */\n\nLexer.lex = function(src, options) {\n  var lexer = new Lexer(options);\n  return lexer.lex(src);\n};\n\n/**\n * Preprocessing\n */\n\nLexer.prototype.lex = function(src) {\n  src = src\n    .replace(/\\r\\n|\\r/g, '\\n')\n    .replace(/\\t/g, '    ')\n    .replace(/\\u00a0/g, ' ')\n    .replace(/\\u2424/g, '\\n');\n\n  return this.token(src, true);\n};\n\n/**\n * Lexing\n */\n\nLexer.prototype.token = function(src, top, bq) {\n  var src = src.replace(/^ +$/gm, '')\n    , next\n    , loose\n    , cap\n    , bull\n    , b\n    , item\n    , space\n    , i\n    , l;\n\n  while (src) {\n    // newline\n    if (cap = this.rules.newline.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (cap[0].length > 1) {\n        this.tokens.push({\n          type: 'space'\n        });\n      }\n    }\n\n    // code\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      cap = cap[0].replace(/^ {4}/gm, '');\n      this.tokens.push({\n        type: 'code',\n        text: !this.options.pedantic\n          ? cap.replace(/\\n+$/, '')\n          : cap\n      });\n      continue;\n    }\n\n    // fences (gfm)\n    if (cap = this.rules.fences.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'code',\n        lang: cap[2],\n        text: cap[3] || ''\n      });\n      continue;\n    }\n\n    // heading\n    if (cap = this.rules.heading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[1].length,\n        text: cap[2]\n      });\n      continue;\n    }\n\n    // table no leading pipe (gfm)\n    if (top && (cap = this.rules.nptable.exec(src))) {\n      src = src.substring(cap[0].length);\n\n      item = {\n        type: 'table',\n        header: cap[1].replace(/^ *| *\\| *$/g, '').split(/ *\\| */),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        cells: cap[3].replace(/\\n$/, '').split('\\n')\n      };\n\n      for (i = 0; i < item.align.length; i++) {\n        if (/^ *-+: *$/.test(item.align[i])) {\n          item.align[i] = 'right';\n        } else if (/^ *:-+: *$/.test(item.align[i])) {\n          item.align[i] = 'center';\n        } else if (/^ *:-+ *$/.test(item.align[i])) {\n          item.align[i] = 'left';\n        } else {\n          item.align[i] = null;\n        }\n      }\n\n      for (i = 0; i < item.cells.length; i++) {\n        item.cells[i] = item.cells[i].split(/ *\\| */);\n      }\n\n      this.tokens.push(item);\n\n      continue;\n    }\n\n    // lheading\n    if (cap = this.rules.lheading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[2] === '=' ? 1 : 2,\n        text: cap[1]\n      });\n      continue;\n    }\n\n    // hr\n    if (cap = this.rules.hr.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'hr'\n      });\n      continue;\n    }\n\n    // blockquote\n    if (cap = this.rules.blockquote.exec(src)) {\n      src = src.substring(cap[0].length);\n\n      this.tokens.push({\n        type: 'blockquote_start'\n      });\n\n      cap = cap[0].replace(/^ *> ?/gm, '');\n\n      // Pass `top` to keep the current\n      // \"toplevel\" state. This is exactly\n      // how markdown.pl works.\n      this.token(cap, top, true);\n\n      this.tokens.push({\n        type: 'blockquote_end'\n      });\n\n      continue;\n    }\n\n    // list\n    if (cap = this.rules.list.exec(src)) {\n      src = src.substring(cap[0].length);\n      bull = cap[2];\n\n      this.tokens.push({\n        type: 'list_start',\n        ordered: bull.length > 1\n      });\n\n      // Get each top-level item.\n      cap = cap[0].match(this.rules.item);\n\n      next = false;\n      l = cap.length;\n      i = 0;\n\n      for (; i < l; i++) {\n        item = cap[i];\n\n        // Remove the list item's bullet\n        // so it is seen as the next token.\n        space = item.length;\n        item = item.replace(/^ *([*+-]|\\d+\\.) +/, '');\n\n        // Outdent whatever the\n        // list item contains. Hacky.\n        if (~item.indexOf('\\n ')) {\n          space -= item.length;\n          item = !this.options.pedantic\n            ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')\n            : item.replace(/^ {1,4}/gm, '');\n        }\n\n        // Determine whether the next list item belongs here.\n        // Backpedal if it does not belong in this list.\n        if (this.options.smartLists && i !== l - 1) {\n          b = block.bullet.exec(cap[i + 1])[0];\n          if (bull !== b && !(bull.length > 1 && b.length > 1)) {\n            src = cap.slice(i + 1).join('\\n') + src;\n            i = l - 1;\n          }\n        }\n\n        // Determine whether item is loose or not.\n        // Use: /(^|\\n)(?! )[^\\n]+\\n\\n(?!\\s*$)/\n        // for discount behavior.\n        loose = next || /\\n\\n(?!\\s*$)/.test(item);\n        if (i !== l - 1) {\n          next = item.charAt(item.length - 1) === '\\n';\n          if (!loose) loose = next;\n        }\n\n        this.tokens.push({\n          type: loose\n            ? 'loose_item_start'\n            : 'list_item_start'\n        });\n\n        // Recurse.\n        this.token(item, false, bq);\n\n        this.tokens.push({\n          type: 'list_item_end'\n        });\n      }\n\n      this.tokens.push({\n        type: 'list_end'\n      });\n\n      continue;\n    }\n\n    // html\n    if (cap = this.rules.html.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: this.options.sanitize\n          ? 'paragraph'\n          : 'html',\n        pre: !this.options.sanitizer\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      });\n      continue;\n    }\n\n    // def\n    if ((!bq && top) && (cap = this.rules.def.exec(src))) {\n      src = src.substring(cap[0].length);\n      this.tokens.links[cap[1].toLowerCase()] = {\n        href: cap[2],\n        title: cap[3]\n      };\n      continue;\n    }\n\n    // table (gfm)\n    if (top && (cap = this.rules.table.exec(src))) {\n      src = src.substring(cap[0].length);\n\n      item = {\n        type: 'table',\n        header: cap[1].replace(/^ *| *\\| *$/g, '').split(/ *\\| */),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        cells: cap[3].replace(/(?: *\\| *)?\\n$/, '').split('\\n')\n      };\n\n      for (i = 0; i < item.align.length; i++) {\n        if (/^ *-+: *$/.test(item.align[i])) {\n          item.align[i] = 'right';\n        } else if (/^ *:-+: *$/.test(item.align[i])) {\n          item.align[i] = 'center';\n        } else if (/^ *:-+ *$/.test(item.align[i])) {\n          item.align[i] = 'left';\n        } else {\n          item.align[i] = null;\n        }\n      }\n\n      for (i = 0; i < item.cells.length; i++) {\n        item.cells[i] = item.cells[i]\n          .replace(/^ *\\| *| *\\| *$/g, '')\n          .split(/ *\\| */);\n      }\n\n      this.tokens.push(item);\n\n      continue;\n    }\n\n    // top-level paragraph\n    if (top && (cap = this.rules.paragraph.exec(src))) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'paragraph',\n        text: cap[1].charAt(cap[1].length - 1) === '\\n'\n          ? cap[1].slice(0, -1)\n          : cap[1]\n      });\n      continue;\n    }\n\n    // text\n    if (cap = this.rules.text.exec(src)) {\n      // Top-level should never reach here.\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'text',\n        text: cap[0]\n      });\n      continue;\n    }\n\n    if (src) {\n      throw new\n        Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return this.tokens;\n};\n\n/**\n * Inline-Level Grammar\n */\n\nvar inline = {\n  escape: /^\\\\([\\\\`*{}\\[\\]()#+\\-.!_>])/,\n  autolink: /^<([^ >]+(@|:\\/)[^ >]+)>/,\n  url: noop,\n  tag: /^<!--[\\s\\S]*?-->|^<\\/?\\w+(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>/,\n  link: /^!?\\[(inside)\\]\\(href\\)/,\n  reflink: /^!?\\[(inside)\\]\\s*\\[([^\\]]*)\\]/,\n  nolink: /^!?\\[((?:\\[[^\\]]*\\]|[^\\[\\]])*)\\]/,\n  strong: /^__([\\s\\S]+?)__(?!_)|^\\*\\*([\\s\\S]+?)\\*\\*(?!\\*)/,\n  em: /^\\b_((?:[^_]|__)+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,\n  code: /^(`+)([\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^ {2,}\\n(?!\\s*$)/,\n  del: noop,\n  text: /^[\\s\\S]+?(?=[\\\\<!\\[_*`]| {2,}\\n|$)/\n};\n\ninline._inside = /(?:\\[[^\\]]*\\]|[^\\[\\]]|\\](?=[^\\[]*\\]))*/;\ninline._href = /\\s*<?([\\s\\S]*?)>?(?:\\s+['\"]([\\s\\S]*?)['\"])?\\s*/;\n\ninline.link = replace(inline.link)\n  ('inside', inline._inside)\n  ('href', inline._href)\n  ();\n\ninline.reflink = replace(inline.reflink)\n  ('inside', inline._inside)\n  ();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = merge({}, inline);\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = merge({}, inline.normal, {\n  strong: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n  em: /^_(?=\\S)([\\s\\S]*?\\S)_(?!_)|^\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)/\n});\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = merge({}, inline.normal, {\n  escape: replace(inline.escape)('])', '~|])')(),\n  url: /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/,\n  del: /^~~(?=\\S)([\\s\\S]*?\\S)~~/,\n  text: replace(inline.text)\n    (']|', '~]|')\n    ('|', '|https?://|')\n    ()\n});\n\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = merge({}, inline.gfm, {\n  br: replace(inline.br)('{2,}', '*')(),\n  text: replace(inline.gfm.text)('{2,}', '*')()\n});\n\n/**\n * Inline Lexer & Compiler\n */\n\nfunction InlineLexer(links, options) {\n  this.options = options || marked.defaults;\n  this.links = links;\n  this.rules = inline.normal;\n  this.renderer = this.options.renderer || new Renderer;\n  this.renderer.options = this.options;\n\n  if (!this.links) {\n    throw new\n      Error('Tokens array requires a `links` property.');\n  }\n\n  if (this.options.gfm) {\n    if (this.options.breaks) {\n      this.rules = inline.breaks;\n    } else {\n      this.rules = inline.gfm;\n    }\n  } else if (this.options.pedantic) {\n    this.rules = inline.pedantic;\n  }\n}\n\n/**\n * Expose Inline Rules\n */\n\nInlineLexer.rules = inline;\n\n/**\n * Static Lexing/Compiling Method\n */\n\nInlineLexer.output = function(src, links, options) {\n  var inline = new InlineLexer(links, options);\n  return inline.output(src);\n};\n\n/**\n * Lexing/Compiling\n */\n\nInlineLexer.prototype.output = function(src) {\n  var out = ''\n    , link\n    , text\n    , href\n    , cap;\n\n  while (src) {\n    // escape\n    if (cap = this.rules.escape.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += cap[1];\n      continue;\n    }\n\n    // autolink\n    if (cap = this.rules.autolink.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (cap[2] === '@') {\n        text = escape(\n          cap[1].charAt(6) === ':'\n          ? this.mangle(cap[1].substring(7))\n          : this.mangle(cap[1])\n        );\n        href = this.mangle('mailto:') + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n      out += this.renderer.link(href, null, text);\n      continue;\n    }\n\n    // url (gfm)\n    if (!this.inLink && (cap = this.rules.url.exec(src))) {\n      src = src.substring(cap[0].length);\n      text = escape(cap[1]);\n      href = text;\n      out += this.renderer.link(href, null, text);\n      continue;\n    }\n\n    // tag\n    if (cap = this.rules.tag.exec(src)) {\n      if (!this.inLink && /^<a /i.test(cap[0])) {\n        this.inLink = true;\n      } else if (this.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.inLink = false;\n      }\n      src = src.substring(cap[0].length);\n      out += this.options.sanitize\n        ? this.options.sanitizer\n          ? this.options.sanitizer(cap[0])\n          : escape(cap[0])\n        : cap[0]\n      continue;\n    }\n\n    // link\n    if (cap = this.rules.link.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.inLink = true;\n      out += this.outputLink(cap, {\n        href: cap[2],\n        title: cap[3]\n      });\n      this.inLink = false;\n      continue;\n    }\n\n    // reflink, nolink\n    if ((cap = this.rules.reflink.exec(src))\n        || (cap = this.rules.nolink.exec(src))) {\n      src = src.substring(cap[0].length);\n      link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = this.links[link.toLowerCase()];\n      if (!link || !link.href) {\n        out += cap[0].charAt(0);\n        src = cap[0].substring(1) + src;\n        continue;\n      }\n      this.inLink = true;\n      out += this.outputLink(cap, link);\n      this.inLink = false;\n      continue;\n    }\n\n    // strong\n    if (cap = this.rules.strong.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.strong(this.output(cap[2] || cap[1]));\n      continue;\n    }\n\n    // em\n    if (cap = this.rules.em.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.em(this.output(cap[2] || cap[1]));\n      continue;\n    }\n\n    // code\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.codespan(escape(cap[2].trim(), true));\n      continue;\n    }\n\n    // br\n    if (cap = this.rules.br.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.br();\n      continue;\n    }\n\n    // del (gfm)\n    if (cap = this.rules.del.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.del(this.output(cap[1]));\n      continue;\n    }\n\n    // text\n    if (cap = this.rules.text.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.text(escape(this.smartypants(cap[0])));\n      continue;\n    }\n\n    if (src) {\n      throw new\n        Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return out;\n};\n\n/**\n * Compile Link\n */\n\nInlineLexer.prototype.outputLink = function(cap, link) {\n  var href = escape(link.href)\n    , title = link.title ? escape(link.title) : null;\n\n  return cap[0].charAt(0) !== '!'\n    ? this.renderer.link(href, title, this.output(cap[1]))\n    : this.renderer.image(href, title, escape(cap[1]));\n};\n\n/**\n * Smartypants Transformations\n */\n\nInlineLexer.prototype.smartypants = function(text) {\n  if (!this.options.smartypants) return text;\n  return text\n    // em-dashes\n    .replace(/---/g, '\\u2014')\n    // en-dashes\n    .replace(/--/g, '\\u2013')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n};\n\n/**\n * Mangle Links\n */\n\nInlineLexer.prototype.mangle = function(text) {\n  if (!this.options.mangle) return text;\n  var out = ''\n    , l = text.length\n    , i = 0\n    , ch;\n\n  for (; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n};\n\n/**\n * Renderer\n */\n\nfunction Renderer(options) {\n  this.options = options || {};\n}\n\nRenderer.prototype.code = function(code, lang, escaped) {\n  if (this.options.highlight) {\n    var out = this.options.highlight(code, lang);\n    if (out != null && out !== code) {\n      escaped = true;\n      code = out;\n    }\n  }\n\n  if (!lang) {\n    return '<pre><code>'\n      + (escaped ? code : escape(code, true))\n      + '\\n</code></pre>';\n  }\n\n  return '<pre><code class=\"'\n    + this.options.langPrefix\n    + escape(lang, true)\n    + '\">'\n    + (escaped ? code : escape(code, true))\n    + '\\n</code></pre>\\n';\n};\n\nRenderer.prototype.blockquote = function(quote) {\n  return '<blockquote>\\n' + quote + '</blockquote>\\n';\n};\n\nRenderer.prototype.html = function(html) {\n  return html;\n};\n\nRenderer.prototype.heading = function(text, level, raw) {\n  return '<h'\n    + level\n    + ' id=\"'\n    + this.options.headerPrefix\n    + raw.toLowerCase().replace(/[^\\w]+/g, '-')\n    + '\">'\n    + text\n    + '</h'\n    + level\n    + '>\\n';\n};\n\nRenderer.prototype.hr = function() {\n  return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n};\n\nRenderer.prototype.list = function(body, ordered) {\n  var type = ordered ? 'ol' : 'ul';\n  return '<' + type + '>\\n' + body + '</' + type + '>\\n';\n};\n\nRenderer.prototype.listitem = function(text) {\n  return '<li>' + text + '</li>\\n';\n};\n\nRenderer.prototype.paragraph = function(text) {\n  return '<p>' + text + '</p>\\n';\n};\n\nRenderer.prototype.table = function(header, body) {\n  return '<table>\\n'\n    + '<thead>\\n'\n    + header\n    + '</thead>\\n'\n    + '<tbody>\\n'\n    + body\n    + '</tbody>\\n'\n    + '</table>\\n';\n};\n\nRenderer.prototype.tablerow = function(content) {\n  return '<tr>\\n' + content + '</tr>\\n';\n};\n\nRenderer.prototype.tablecell = function(content, flags) {\n  var type = flags.header ? 'th' : 'td';\n  var tag = flags.align\n    ? '<' + type + ' style=\"text-align:' + flags.align + '\">'\n    : '<' + type + '>';\n  return tag + content + '</' + type + '>\\n';\n};\n\n// span level renderer\nRenderer.prototype.strong = function(text) {\n  return '<strong>' + text + '</strong>';\n};\n\nRenderer.prototype.em = function(text) {\n  return '<em>' + text + '</em>';\n};\n\nRenderer.prototype.codespan = function(text) {\n  return '<code>' + text + '</code>';\n};\n\nRenderer.prototype.br = function() {\n  return this.options.xhtml ? '<br/>' : '<br>';\n};\n\nRenderer.prototype.del = function(text) {\n  return '<del>' + text + '</del>';\n};\n\nRenderer.prototype.link = function(href, title, text) {\n  if (this.options.sanitize) {\n    try {\n      var prot = decodeURIComponent(unescape(href))\n        .replace(/[^\\w:]/g, '')\n        .toLowerCase();\n    } catch (e) {\n      return '';\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return '';\n    }\n  }\n  if (this.options.baseUrl && !originIndependentUrl.test(href)) {\n    href = resolveUrl(this.options.baseUrl, href);\n  }\n  var out = '<a href=\"' + href + '\"';\n  if (title) {\n    out += ' title=\"' + title + '\"';\n  }\n  out += '>' + text + '</a>';\n  return out;\n};\n\nRenderer.prototype.image = function(href, title, text) {\n  if (this.options.baseUrl && !originIndependentUrl.test(href)) {\n    href = resolveUrl(this.options.baseUrl, href);\n  }\n  var out = '<img src=\"' + href + '\" alt=\"' + text + '\"';\n  if (title) {\n    out += ' title=\"' + title + '\"';\n  }\n  out += this.options.xhtml ? '/>' : '>';\n  return out;\n};\n\nRenderer.prototype.text = function(text) {\n  return text;\n};\n\n/**\n * Parsing & Compiling\n */\n\nfunction Parser(options) {\n  this.tokens = [];\n  this.token = null;\n  this.options = options || marked.defaults;\n  this.options.renderer = this.options.renderer || new Renderer;\n  this.renderer = this.options.renderer;\n  this.renderer.options = this.options;\n}\n\n/**\n * Static Parse Method\n */\n\nParser.parse = function(src, options, renderer) {\n  var parser = new Parser(options, renderer);\n  return parser.parse(src);\n};\n\n/**\n * Parse Loop\n */\n\nParser.prototype.parse = function(src) {\n  this.inline = new InlineLexer(src.links, this.options, this.renderer);\n  this.tokens = src.reverse();\n\n  var out = '';\n  while (this.next()) {\n    out += this.tok();\n  }\n\n  return out;\n};\n\n/**\n * Next Token\n */\n\nParser.prototype.next = function() {\n  return this.token = this.tokens.pop();\n};\n\n/**\n * Preview Next Token\n */\n\nParser.prototype.peek = function() {\n  return this.tokens[this.tokens.length - 1] || 0;\n};\n\n/**\n * Parse Text Tokens\n */\n\nParser.prototype.parseText = function() {\n  var body = this.token.text;\n\n  while (this.peek().type === 'text') {\n    body += '\\n' + this.next().text;\n  }\n\n  return this.inline.output(body);\n};\n\n/**\n * Parse Current Token\n */\n\nParser.prototype.tok = function() {\n  switch (this.token.type) {\n    case 'space': {\n      return '';\n    }\n    case 'hr': {\n      return this.renderer.hr();\n    }\n    case 'heading': {\n      return this.renderer.heading(\n        this.inline.output(this.token.text),\n        this.token.depth,\n        this.token.text);\n    }\n    case 'code': {\n      return this.renderer.code(this.token.text,\n        this.token.lang,\n        this.token.escaped);\n    }\n    case 'table': {\n      var header = ''\n        , body = ''\n        , i\n        , row\n        , cell\n        , flags\n        , j;\n\n      // header\n      cell = '';\n      for (i = 0; i < this.token.header.length; i++) {\n        flags = { header: true, align: this.token.align[i] };\n        cell += this.renderer.tablecell(\n          this.inline.output(this.token.header[i]),\n          { header: true, align: this.token.align[i] }\n        );\n      }\n      header += this.renderer.tablerow(cell);\n\n      for (i = 0; i < this.token.cells.length; i++) {\n        row = this.token.cells[i];\n\n        cell = '';\n        for (j = 0; j < row.length; j++) {\n          cell += this.renderer.tablecell(\n            this.inline.output(row[j]),\n            { header: false, align: this.token.align[j] }\n          );\n        }\n\n        body += this.renderer.tablerow(cell);\n      }\n      return this.renderer.table(header, body);\n    }\n    case 'blockquote_start': {\n      var body = '';\n\n      while (this.next().type !== 'blockquote_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.blockquote(body);\n    }\n    case 'list_start': {\n      var body = ''\n        , ordered = this.token.ordered;\n\n      while (this.next().type !== 'list_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.list(body, ordered);\n    }\n    case 'list_item_start': {\n      var body = '';\n\n      while (this.next().type !== 'list_item_end') {\n        body += this.token.type === 'text'\n          ? this.parseText()\n          : this.tok();\n      }\n\n      return this.renderer.listitem(body);\n    }\n    case 'loose_item_start': {\n      var body = '';\n\n      while (this.next().type !== 'list_item_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.listitem(body);\n    }\n    case 'html': {\n      var html = !this.token.pre && !this.options.pedantic\n        ? this.inline.output(this.token.text)\n        : this.token.text;\n      return this.renderer.html(html);\n    }\n    case 'paragraph': {\n      return this.renderer.paragraph(this.inline.output(this.token.text));\n    }\n    case 'text': {\n      return this.renderer.paragraph(this.parseText());\n    }\n  }\n};\n\n/**\n * Helpers\n */\n\nfunction escape(html, encode) {\n  return html\n    .replace(!encode ? /&(?!#?\\w+;)/g : /&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#39;');\n}\n\nfunction unescape(html) {\n\t// explicitly match decimal, hex, and named HTML entities\n  return html.replace(/&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig, function(_, n) {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nfunction replace(regex, opt) {\n  regex = regex.source;\n  opt = opt || '';\n  return function self(name, val) {\n    if (!name) return new RegExp(regex, opt);\n    val = val.source || val;\n    val = val.replace(/(^|[^\\[])\\^/g, '$1');\n    regex = regex.replace(name, val);\n    return self;\n  };\n}\n\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (/^[^:]+:\\/*[^/]*$/.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = base.replace(/[^/]*$/, '');\n    }\n  }\n  base = baseUrls[' ' + base];\n\n  if (href.slice(0, 2) === '//') {\n    return base.replace(/:[^]*/, ':') + href;\n  } else if (href.charAt(0) === '/') {\n    return base.replace(/(:\\/*[^/]*)[^]*/, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\nbaseUrls = {};\noriginIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n\nfunction noop() {}\nnoop.exec = noop;\n\nfunction merge(obj) {\n  var i = 1\n    , target\n    , key;\n\n  for (; i < arguments.length; i++) {\n    target = arguments[i];\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n\n  return obj;\n}\n\n\n/**\n * Marked\n */\n\nfunction marked(src, opt, callback) {\n  if (callback || typeof opt === 'function') {\n    if (!callback) {\n      callback = opt;\n      opt = null;\n    }\n\n    opt = merge({}, marked.defaults, opt || {});\n\n    var highlight = opt.highlight\n      , tokens\n      , pending\n      , i = 0;\n\n    try {\n      tokens = Lexer.lex(src, opt)\n    } catch (e) {\n      return callback(e);\n    }\n\n    pending = tokens.length;\n\n    var done = function(err) {\n      if (err) {\n        opt.highlight = highlight;\n        return callback(err);\n      }\n\n      var out;\n\n      try {\n        out = Parser.parse(tokens, opt);\n      } catch (e) {\n        err = e;\n      }\n\n      opt.highlight = highlight;\n\n      return err\n        ? callback(err)\n        : callback(null, out);\n    };\n\n    if (!highlight || highlight.length < 3) {\n      return done();\n    }\n\n    delete opt.highlight;\n\n    if (!pending) return done();\n\n    for (; i < tokens.length; i++) {\n      (function(token) {\n        if (token.type !== 'code') {\n          return --pending || done();\n        }\n        return highlight(token.text, token.lang, function(err, code) {\n          if (err) return done(err);\n          if (code == null || code === token.text) {\n            return --pending || done();\n          }\n          token.text = code;\n          token.escaped = true;\n          --pending || done();\n        });\n      })(tokens[i]);\n    }\n\n    return;\n  }\n  try {\n    if (opt) opt = merge({}, marked.defaults, opt);\n    return Parser.parse(Lexer.lex(src, opt), opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/chjj/marked.';\n    if ((opt || marked.defaults).silent) {\n      return '<p>An error occured:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n}\n\n/**\n * Options\n */\n\nmarked.options =\nmarked.setOptions = function(opt) {\n  merge(marked.defaults, opt);\n  return marked;\n};\n\nmarked.defaults = {\n  gfm: true,\n  tables: true,\n  breaks: false,\n  pedantic: false,\n  sanitize: false,\n  sanitizer: null,\n  mangle: true,\n  smartLists: false,\n  silent: false,\n  highlight: null,\n  langPrefix: 'lang-',\n  smartypants: false,\n  headerPrefix: '',\n  renderer: new Renderer,\n  xhtml: false,\n  baseUrl: null\n};\n\n/**\n * Expose\n */\n\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\n\nmarked.Renderer = Renderer;\n\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\n\nmarked.InlineLexer = InlineLexer;\nmarked.inlineLexer = InlineLexer.output;\n\nmarked.parse = marked;\n\nif (typeof module !== 'undefined' && typeof exports === 'object') {\n  module.exports = marked;\n} else if (typeof define === 'function' && define.amd) {\n  define(function() { return marked; });\n} else {\n  this.marked = marked;\n}\n\n}).call(function() {\n  return this || (typeof window !== 'undefined' ? window : global);\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/marked/lib/marked.js\n// module id = 1\n// module chunks = 0","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 2\n// module chunks = 0"],"sourceRoot":""}